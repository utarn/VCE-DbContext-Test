// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace TestVCE.Models;

public partial class VECCoreAppDBContext : DbContext
{
    public VECCoreAppDBContext(DbContextOptions<VECCoreAppDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Address> Addresses { get; set; }

    public virtual DbSet<AdministratorProfile> AdministratorProfiles { get; set; }

    public virtual DbSet<Analysis> Analyses { get; set; }

    public virtual DbSet<ApplicationRole> ApplicationRoles { get; set; }

    public virtual DbSet<ApplicationUser> ApplicationUsers { get; set; }

    public virtual DbSet<ApplicationUserRolePermission> ApplicationUserRolePermissions { get; set; }

    public virtual DbSet<Audit> Audits { get; set; }

    public virtual DbSet<AuditDataItemPersistent> AuditDataItemPersistents { get; set; }

    public virtual DbSet<AuditedObjectWeakReference> AuditedObjectWeakReferences { get; set; }

    public virtual DbSet<CertificateType> CertificateTypes { get; set; }

    public virtual DbSet<Corporate> Corporates { get; set; }

    public virtual DbSet<Country> Countries { get; set; }

    public virtual DbSet<Curriculum> Curricula { get; set; }

    public virtual DbSet<DashboardDatum> DashboardData { get; set; }

    public virtual DbSet<DataImportHistory> DataImportHistories { get; set; }

    public virtual DbSet<DefaultJobPostingSetup> DefaultJobPostingSetups { get; set; }

    public virtual DbSet<District> Districts { get; set; }

    public virtual DbSet<EducationalQualification> EducationalQualifications { get; set; }

    public virtual DbSet<EmailConfiguration> EmailConfigurations { get; set; }

    public virtual DbSet<EmployerBusinessType> EmployerBusinessTypes { get; set; }

    public virtual DbSet<EmployerFileAttachment> EmployerFileAttachments { get; set; }

    public virtual DbSet<EmployerMainBusinessType> EmployerMainBusinessTypes { get; set; }

    public virtual DbSet<EmployerProfile> EmployerProfiles { get; set; }

    public virtual DbSet<EmployerProfileStatus> EmployerProfileStatuses { get; set; }

    public virtual DbSet<EmployerProfileType> EmployerProfileTypes { get; set; }

    public virtual DbSet<EmployerSchoolContact> EmployerSchoolContacts { get; set; }

    public virtual DbSet<EmployerSummary> EmployerSummaries { get; set; }

    public virtual DbSet<EmploymentCategory> EmploymentCategories { get; set; }

    public virtual DbSet<EmploymentStatus> EmploymentStatuses { get; set; }

    public virtual DbSet<EntityStatus> EntityStatuses { get; set; }

    public virtual DbSet<Event> Events { get; set; }

    public virtual DbSet<FileAttachment> FileAttachments { get; set; }

    public virtual DbSet<FileDatum> FileData { get; set; }

    public virtual DbSet<Government> Governments { get; set; }

    public virtual DbSet<GraduatedStudent> GraduatedStudents { get; set; }

    public virtual DbSet<GraduatedStudentJobTrackingReport> GraduatedStudentJobTrackingReports { get; set; }

    public virtual DbSet<GraduatedStudentJobTrackingReportActivity> GraduatedStudentJobTrackingReportActivities { get; set; }

    public virtual DbSet<GraduatedStudentJobTrackingReportMain> GraduatedStudentJobTrackingReportMains { get; set; }

    public virtual DbSet<GraduatedStudentJobTrackingReportStudentDetail> GraduatedStudentJobTrackingReportStudentDetails { get; set; }

    public virtual DbSet<Hcategory> Hcategories { get; set; }

    public virtual DbSet<IdgeneratorTable> IdgeneratorTables { get; set; }

    public virtual DbSet<Industry> Industries { get; set; }

    public virtual DbSet<IndustryAndMinorMatching> IndustryAndMinorMatchings { get; set; }

    public virtual DbSet<Institute> Institutes { get; set; }

    public virtual DbSet<JobApplication> JobApplications { get; set; }

    public virtual DbSet<JobPosition> JobPositions { get; set; }

    public virtual DbSet<JobPositionMatching> JobPositionMatchings { get; set; }

    public virtual DbSet<JobPosting> JobPostings { get; set; }

    public virtual DbSet<JobSegment> JobSegments { get; set; }

    public virtual DbSet<JobTrackingReportActivity> JobTrackingReportActivities { get; set; }

    public virtual DbSet<KpiDefinition> KpiDefinitions { get; set; }

    public virtual DbSet<KpiHistoryItem> KpiHistoryItems { get; set; }

    public virtual DbSet<KpiInstance> KpiInstances { get; set; }

    public virtual DbSet<KpiScorecard> KpiScorecards { get; set; }

    public virtual DbSet<KpiScorecardScorecardsKpiInstanceIndicator> KpiScorecardScorecardsKpiInstanceIndicators { get; set; }

    public virtual DbSet<LookingForJob> LookingForJobs { get; set; }

    public virtual DbSet<Major> Majors { get; set; }

    public virtual DbSet<MediaDataObject> MediaDataObjects { get; set; }

    public virtual DbSet<Minor> Minors { get; set; }

    public virtual DbSet<ModelDifference> ModelDifferences { get; set; }

    public virtual DbSet<ModelDifferenceAspect> ModelDifferenceAspects { get; set; }

    public virtual DbSet<ModificationInfo> ModificationInfos { get; set; }

    public virtual DbSet<ModuleInfo> ModuleInfos { get; set; }

    public virtual DbSet<Nationality> Nationalities { get; set; }

    public virtual DbSet<Note> Notes { get; set; }

    public virtual DbSet<NotificationConfiguration> NotificationConfigurations { get; set; }

    public virtual DbSet<NotificationSetup> NotificationSetups { get; set; }

    public virtual DbSet<Organization> Organizations { get; set; }

    public virtual DbSet<OrganizationType> OrganizationTypes { get; set; }

    public virtual DbSet<Party> Parties { get; set; }

    public virtual DbSet<PayFrequency> PayFrequencies { get; set; }

    public virtual DbSet<PayRate> PayRates { get; set; }

    public virtual DbSet<PermissionPolicyActionPermissionObject> PermissionPolicyActionPermissionObjects { get; set; }

    public virtual DbSet<PermissionPolicyMemberPermissionsObject> PermissionPolicyMemberPermissionsObjects { get; set; }

    public virtual DbSet<PermissionPolicyNavigationPermissionsObject> PermissionPolicyNavigationPermissionsObjects { get; set; }

    public virtual DbSet<PermissionPolicyObjectPermissionsObject> PermissionPolicyObjectPermissionsObjects { get; set; }

    public virtual DbSet<PermissionPolicyRole> PermissionPolicyRoles { get; set; }

    public virtual DbSet<PermissionPolicyTypePermissionsObject> PermissionPolicyTypePermissionsObjects { get; set; }

    public virtual DbSet<PermissionPolicyUser> PermissionPolicyUsers { get; set; }

    public virtual DbSet<PermissionPolicyUserUsersPermissionPolicyRoleRole> PermissionPolicyUserUsersPermissionPolicyRoleRoles { get; set; }

    public virtual DbSet<Person> People { get; set; }

    public virtual DbSet<PhoneNumber> PhoneNumbers { get; set; }

    public virtual DbSet<PhoneType> PhoneTypes { get; set; }

    public virtual DbSet<PostLookingForJob> PostLookingForJobs { get; set; }

    public virtual DbSet<PropertyBag> PropertyBags { get; set; }

    public virtual DbSet<PropertyBagDescriptor> PropertyBagDescriptors { get; set; }

    public virtual DbSet<PropertyDescriptor> PropertyDescriptors { get; set; }

    public virtual DbSet<PropertyDescriptorPropertyDescriptorsPropertyBagDescr3ef9c1ed> PropertyDescriptorPropertyDescriptorsPropertyBagDescr3ef9c1eds { get; set; }

    public virtual DbSet<PropertyValue> PropertyValues { get; set; }

    public virtual DbSet<Province> Provinces { get; set; }

    public virtual DbSet<Religion> Religions { get; set; }

    public virtual DbSet<ReportDataV2> ReportDataV2s { get; set; }

    public virtual DbSet<Resource> Resources { get; set; }

    public virtual DbSet<ResourceResourcesEventEvent> ResourceResourcesEventEvents { get; set; }

    public virtual DbSet<RichTextMailMergeDatum> RichTextMailMergeData { get; set; }

    public virtual DbSet<SalaryRange> SalaryRanges { get; set; }

    public virtual DbSet<School> Schools { get; set; }

    public virtual DbSet<SchoolEmployee> SchoolEmployees { get; set; }

    public virtual DbSet<SchoolEmployeeGroupType> SchoolEmployeeGroupTypes { get; set; }

    public virtual DbSet<SchoolEmployeeProfile> SchoolEmployeeProfiles { get; set; }

    public virtual DbSet<SchoolEmployeeType> SchoolEmployeeTypes { get; set; }

    public virtual DbSet<SchoolGraduatedStudent> SchoolGraduatedStudents { get; set; }

    public virtual DbSet<ServerPrefix> ServerPrefixes { get; set; }

    public virtual DbSet<State> States { get; set; }

    public virtual DbSet<Student> Students { get; set; }

    public virtual DbSet<StudentJobRecord> StudentJobRecords { get; set; }

    public virtual DbSet<StudentResume> StudentResumes { get; set; }

    public virtual DbSet<StudentReward> StudentRewards { get; set; }

    public virtual DbSet<StudentStudyRecord> StudentStudyRecords { get; set; }

    public virtual DbSet<StudentVeceducationInformation> StudentVeceducationInformations { get; set; }

    public virtual DbSet<SubjectType> SubjectTypes { get; set; }

    public virtual DbSet<Tambon> Tambons { get; set; }

    public virtual DbSet<Task> Tasks { get; set; }

    public virtual DbSet<TitleName> TitleNames { get; set; }

    public virtual DbSet<UserBookmark> UserBookmarks { get; set; }

    public virtual DbSet<VerifyManager> VerifyManagers { get; set; }

    public virtual DbSet<ViewCounter> ViewCounters { get; set; }

    public virtual DbSet<XpoInstanceKey> XpoInstanceKeys { get; set; }

    public virtual DbSet<XpoRunningWorkflowInstanceInfo> XpoRunningWorkflowInstanceInfos { get; set; }

    public virtual DbSet<XpoStartWorkflowRequest> XpoStartWorkflowRequests { get; set; }

    public virtual DbSet<XpoState> XpoStates { get; set; }

    public virtual DbSet<XpoStateAppearance> XpoStateAppearances { get; set; }

    public virtual DbSet<XpoStateMachine> XpoStateMachines { get; set; }

    public virtual DbSet<XpoTrackingRecord> XpoTrackingRecords { get; set; }

    public virtual DbSet<XpoTransition> XpoTransitions { get; set; }

    public virtual DbSet<XpoUserActivityVersion> XpoUserActivityVersions { get; set; }

    public virtual DbSet<XpoWorkflowDefinition> XpoWorkflowDefinitions { get; set; }

    public virtual DbSet<XpoWorkflowInstance> XpoWorkflowInstances { get; set; }

    public virtual DbSet<XpoWorkflowInstanceControlCommandRequest> XpoWorkflowInstanceControlCommandRequests { get; set; }

    public virtual DbSet<XpobjectType> XpobjectTypes { get; set; }

    public virtual DbSet<XpweakReference> XpweakReferences { get; set; }

    public virtual DbSet<XtraReportDatum> XtraReportData { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.UseCollation("en_US.UTF-8");

        modelBuilder.Entity<Address>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.ToTable("Address");

            entity.HasIndex(e => e.Country, "iCountry_Address");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_Address");

            entity.Property(e => e.Oid).ValueGeneratedNever();
            entity.Property(e => e.City).HasMaxLength(100);
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.StateProvince).HasMaxLength(100);
            entity.Property(e => e.Street).HasMaxLength(100);
            entity.Property(e => e.ZipPostal).HasMaxLength(100);

            entity.HasOne(d => d.CountryNavigation).WithMany(p => p.Addresses)
                .HasForeignKey(d => d.Country)
                .HasConstraintName("FK_Address_Country");
        });

        modelBuilder.Entity<AdministratorProfile>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("AdministratorProfile_pkey");

            entity.ToTable("AdministratorProfile");

            entity.HasIndex(e => e.ApplicationUser, "iApplicationUser_AdministratorProfile");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_AdministratorProfile");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.Email).HasMaxLength(100);
            entity.Property(e => e.FirstName).HasMaxLength(100);
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.LastName).HasMaxLength(100);

            entity.HasOne(d => d.ApplicationUserNavigation).WithMany(p => p.AdministratorProfiles)
                .HasForeignKey(d => d.ApplicationUser)
                .HasConstraintName("FK_AdministratorProfile_ApplicationUser");
        });

        modelBuilder.Entity<Analysis>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.ToTable("Analysis");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_Analysis");

            entity.Property(e => e.Oid).ValueGeneratedNever();
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.Name).HasMaxLength(100);
        });

        modelBuilder.Entity<ApplicationRole>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.ToTable("ApplicationRole");

            entity.Property(e => e.Oid).ValueGeneratedNever();
            entity.Property(e => e.Code).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(100);

            entity.HasOne(d => d.OidNavigation).WithOne(p => p.ApplicationRole)
                .HasForeignKey<ApplicationRole>(d => d.Oid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ApplicationRole_Oid");
        });

        modelBuilder.Entity<ApplicationUser>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.ToTable("ApplicationUser");

            entity.Property(e => e.Oid).ValueGeneratedNever();

            entity.HasOne(d => d.OidNavigation).WithOne(p => p.ApplicationUser)
                .HasForeignKey<ApplicationUser>(d => d.Oid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ApplicationUser_Oid");
        });

        modelBuilder.Entity<ApplicationUserRolePermission>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("ApplicationUser_RolePermission_pkey");

            entity.ToTable("ApplicationUser_RolePermission");

            entity.HasIndex(e => e.ApplicationUser, "iApplicationUser_ApplicationUser_RolePermission");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_ApplicationUser_RolePermission");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.ApplicationRoleCode).HasMaxLength(100);
            entity.Property(e => e.ApplicationRoleName).HasMaxLength(100);
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.PermissionDataTypeName).HasMaxLength(100);
            entity.Property(e => e.PermissionDisplayValue).HasMaxLength(250);
            entity.Property(e => e.PermissionValue).HasMaxLength(100);

            entity.HasOne(d => d.ApplicationUserNavigation).WithMany(p => p.ApplicationUserRolePermissions)
                .HasForeignKey(d => d.ApplicationUser)
                .HasConstraintName("FK_ApplicationUser_RolePermission_ApplicationUser");
        });

        modelBuilder.Entity<Audit>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("Audit_pkey");

            entity.ToTable("Audit");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_Audit");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.ActionName).HasMaxLength(100);
            entity.Property(e => e.Date).HasColumnType("timestamp without time zone");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.RecordOid).HasMaxLength(100);
            entity.Property(e => e.TableName).HasMaxLength(100);
            entity.Property(e => e.User).HasMaxLength(100);
        });

        modelBuilder.Entity<AuditDataItemPersistent>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.ToTable("AuditDataItemPersistent");

            entity.HasIndex(e => e.AuditedObject, "iAuditedObject_AuditDataItemPersistent");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_AuditDataItemPersistent");

            entity.HasIndex(e => e.ModifiedOn, "iModifiedOn_AuditDataItemPersistent");

            entity.HasIndex(e => e.NewObject, "iNewObject_AuditDataItemPersistent");

            entity.HasIndex(e => e.OldObject, "iOldObject_AuditDataItemPersistent");

            entity.HasIndex(e => e.OperationType, "iOperationType_AuditDataItemPersistent");

            entity.HasIndex(e => e.UserName, "iUserName_AuditDataItemPersistent");

            entity.Property(e => e.Oid).ValueGeneratedNever();
            entity.Property(e => e.Description).HasMaxLength(2048);
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.ModifiedOn).HasColumnType("timestamp without time zone");
            entity.Property(e => e.NewValue).HasMaxLength(1024);
            entity.Property(e => e.OldValue).HasMaxLength(1024);
            entity.Property(e => e.OperationType).HasMaxLength(100);
            entity.Property(e => e.PropertyName).HasMaxLength(100);
            entity.Property(e => e.UserName).HasMaxLength(100);

            entity.HasOne(d => d.AuditedObjectNavigation).WithMany(p => p.AuditDataItemPersistents)
                .HasForeignKey(d => d.AuditedObject)
                .HasConstraintName("FK_AuditDataItemPersistent_AuditedObject");

            entity.HasOne(d => d.NewObjectNavigation).WithMany(p => p.AuditDataItemPersistentNewObjectNavigations)
                .HasForeignKey(d => d.NewObject)
                .HasConstraintName("FK_AuditDataItemPersistent_NewObject");

            entity.HasOne(d => d.OldObjectNavigation).WithMany(p => p.AuditDataItemPersistentOldObjectNavigations)
                .HasForeignKey(d => d.OldObject)
                .HasConstraintName("FK_AuditDataItemPersistent_OldObject");
        });

        modelBuilder.Entity<AuditedObjectWeakReference>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.ToTable("AuditedObjectWeakReference");

            entity.Property(e => e.Oid).ValueGeneratedNever();
            entity.Property(e => e.DisplayName).HasMaxLength(250);

            entity.HasOne(d => d.OidNavigation).WithOne(p => p.AuditedObjectWeakReference)
                .HasForeignKey<AuditedObjectWeakReference>(d => d.Oid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AuditedObjectWeakReference_Oid");
        });

        modelBuilder.Entity<CertificateType>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("CertificateType_pkey");

            entity.ToTable("CertificateType");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_CertificateType");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.Code).HasMaxLength(100);
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.NameEng).HasMaxLength(100);
            entity.Property(e => e.NameTh)
                .HasMaxLength(100)
                .HasColumnName("NameTH");
        });

        modelBuilder.Entity<Corporate>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("Corporate_pkey");

            entity.ToTable("Corporate");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_Corporate");

            entity.HasIndex(e => e.Province, "iprovince_Corporate");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.Province).HasColumnName("province");
            entity.Property(e => e.Taxid)
                .HasMaxLength(100)
                .HasColumnName("taxid");

            entity.HasOne(d => d.ProvinceNavigation).WithMany(p => p.Corporates)
                .HasForeignKey(d => d.Province)
                .HasConstraintName("FK_Corporate_province");
        });

        modelBuilder.Entity<Country>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.ToTable("Country");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_Country");

            entity.Property(e => e.Oid).ValueGeneratedNever();
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.PhoneCode).HasMaxLength(100);
        });

        modelBuilder.Entity<Curriculum>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("Curriculum_pkey");

            entity.ToTable("Curriculum");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_Curriculum");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.CuriculumType)
                .HasMaxLength(100)
                .HasColumnName("curiculumType");
            entity.Property(e => e.CurriculumId)
                .HasMaxLength(100)
                .HasColumnName("curriculumID");
            entity.Property(e => e.CurriculumYear)
                .HasMaxLength(100)
                .HasColumnName("curriculumYear");
            entity.Property(e => e.DegreeLevelCode)
                .HasMaxLength(100)
                .HasColumnName("degreeLevelCode");
            entity.Property(e => e.DegreeLevelId)
                .HasMaxLength(100)
                .HasColumnName("degreeLevelID");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.MajorCode)
                .HasMaxLength(100)
                .HasColumnName("majorCode");
            entity.Property(e => e.MajorId)
                .HasMaxLength(100)
                .HasColumnName("majorID");
            entity.Property(e => e.MinorCode)
                .HasMaxLength(100)
                .HasColumnName("minorCode");
            entity.Property(e => e.MinorId)
                .HasMaxLength(100)
                .HasColumnName("minorID");
            entity.Property(e => e.Remark)
                .HasMaxLength(100)
                .HasColumnName("remark");
            entity.Property(e => e.StructureYearId)
                .HasMaxLength(100)
                .HasColumnName("structureYearId");
            entity.Property(e => e.SubjectTypeCode)
                .HasMaxLength(100)
                .HasColumnName("subjectTypeCode");
            entity.Property(e => e.SubjectTypeId)
                .HasMaxLength(100)
                .HasColumnName("subjectTypeID");
            entity.Property(e => e.Year)
                .HasMaxLength(100)
                .HasColumnName("year");
        });

        modelBuilder.Entity<DashboardDatum>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_DashboardData");

            entity.Property(e => e.Oid).ValueGeneratedNever();
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.Title).HasMaxLength(100);
        });

        modelBuilder.Entity<DataImportHistory>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("DataImportHistory_pkey");

            entity.ToTable("DataImportHistory");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_DataImportHistory");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.LastImportDatetime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("LastImport_Datetime");
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);
            entity.Property(e => e.ReferenceName).HasMaxLength(100);
        });

        modelBuilder.Entity<DefaultJobPostingSetup>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("DefaultJobPostingSetup_pkey");

            entity.ToTable("DefaultJobPostingSetup");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_DefaultJobPostingSetup");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
        });

        modelBuilder.Entity<District>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("District_pkey");

            entity.ToTable("District");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_District");

            entity.HasIndex(e => e.Province, "iProvince_District");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.DistrictEng).HasMaxLength(100);
            entity.Property(e => e.DistrictEngShort).HasMaxLength(100);
            entity.Property(e => e.DistrictId)
                .HasMaxLength(100)
                .HasColumnName("DistrictID");
            entity.Property(e => e.DistrictThai).HasMaxLength(100);
            entity.Property(e => e.DistrictThaiShort).HasMaxLength(100);
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.ProvinceId)
                .HasMaxLength(100)
                .HasColumnName("ProvinceID");

            entity.HasOne(d => d.ProvinceNavigation).WithMany(p => p.Districts)
                .HasForeignKey(d => d.Province)
                .HasConstraintName("FK_District_Province");
        });

        modelBuilder.Entity<EducationalQualification>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("EducationalQualification_pkey");

            entity.ToTable("EducationalQualification");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_EducationalQualification");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.Code).HasMaxLength(100);
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.NameTh)
                .HasMaxLength(100)
                .HasColumnName("NameTH");
        });

        modelBuilder.Entity<EmailConfiguration>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("EmailConfiguration_pkey");

            entity.ToTable("EmailConfiguration");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_EmailConfiguration");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.FromEmailAddress).HasMaxLength(100);
            entity.Property(e => e.FromEmailDisplayName).HasMaxLength(100);
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.Smtpauthen).HasColumnName("SMTPAuthen");
            entity.Property(e => e.Smtphost)
                .HasMaxLength(100)
                .HasColumnName("SMTPHost");
            entity.Property(e => e.Smtppassword)
                .HasMaxLength(100)
                .HasColumnName("SMTPPassword");
            entity.Property(e => e.Smtpport).HasColumnName("SMTPPort");
            entity.Property(e => e.Smtpssl).HasColumnName("SMTPSSL");
            entity.Property(e => e.Smtpuser)
                .HasMaxLength(100)
                .HasColumnName("SMTPUser");
        });

        modelBuilder.Entity<EmployerBusinessType>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("EmployerBusinessType_pkey");

            entity.ToTable("EmployerBusinessType");

            entity.HasIndex(e => e.EmployerMainBusinessType, "iEmployerMainBusinessType_EmployerBusinessType");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_EmployerBusinessType");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.Code).HasMaxLength(1000);
            entity.Property(e => e.CreatedDate).HasColumnType("timestamp without time zone");
            entity.Property(e => e.DeletedDate).HasColumnType("timestamp without time zone");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.LastUpdatedDate).HasColumnType("timestamp without time zone");
            entity.Property(e => e.NameTh)
                .HasMaxLength(1000)
                .HasColumnName("NameTH");

            entity.HasOne(d => d.EmployerMainBusinessTypeNavigation).WithMany(p => p.EmployerBusinessTypes)
                .HasForeignKey(d => d.EmployerMainBusinessType)
                .HasConstraintName("FK_EmployerBusinessType_EmployerMainBusinessType");
        });

        modelBuilder.Entity<EmployerFileAttachment>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("EmployerFileAttachment_pkey");

            entity.ToTable("EmployerFileAttachment");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_EmployerFileAttachment");

            entity.HasIndex(e => e.EmployerProfile, "iemployerProfile_EmployerFileAttachment");

            entity.HasIndex(e => e.Fileattachment, "ifileattachment_EmployerFileAttachment");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.EmployerProfile).HasColumnName("employerProfile");
            entity.Property(e => e.Fileattachment).HasColumnName("fileattachment");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");

            entity.HasOne(d => d.EmployerProfileNavigation).WithMany(p => p.EmployerFileAttachments)
                .HasForeignKey(d => d.EmployerProfile)
                .HasConstraintName("FK_EmployerFileAttachment_employerProfile");

            entity.HasOne(d => d.FileattachmentNavigation).WithMany(p => p.EmployerFileAttachments)
                .HasForeignKey(d => d.Fileattachment)
                .HasConstraintName("FK_EmployerFileAttachment_fileattachment");
        });

        modelBuilder.Entity<EmployerMainBusinessType>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("EmployerMainBusinessType_pkey");

            entity.ToTable("EmployerMainBusinessType");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_EmployerMainBusinessType");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.Code).HasMaxLength(1000);
            entity.Property(e => e.CreatedDate).HasColumnType("timestamp without time zone");
            entity.Property(e => e.DeletedDate).HasColumnType("timestamp without time zone");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.LastUpdatedDate).HasColumnType("timestamp without time zone");
            entity.Property(e => e.NameTh)
                .HasMaxLength(1000)
                .HasColumnName("NameTH");
        });

        modelBuilder.Entity<EmployerProfile>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("EmployerProfile_pkey");

            entity.ToTable("EmployerProfile");

            entity.HasIndex(e => e.ApplicationUser, "iApplicationUser_EmployerProfile");

            entity.HasIndex(e => e.BusinessType, "iBusinessType_EmployerProfile");

            entity.HasIndex(e => e.CoordinatorTitleName, "iCoordinator_TitleName_EmployerProfile");

            entity.HasIndex(e => e.District, "iDistrict_EmployerProfile");

            entity.HasIndex(e => e.EmployerMainBusinessType, "iEmployerMainBusinessType_EmployerProfile");

            entity.HasIndex(e => e.EmployerProfileStatus, "iEmployerProfileStatus_EmployerProfile");

            entity.HasIndex(e => e.EmployerProfileType, "iEmployerProfileType_EmployerProfile");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_EmployerProfile");

            entity.HasIndex(e => e.Province, "iProvince_EmployerProfile");

            entity.HasIndex(e => e.SchoolPartnerOfficerApplicationUser, "iSchoolPartnerOfficer_ApplicationUser_EmployerProfile");

            entity.HasIndex(e => e.SchoolPartnerOfficerSchool, "iSchoolPartnerOfficer_School_EmployerProfile");

            entity.HasIndex(e => e.Tambon, "iTambon_EmployerProfile");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.AddressNo)
                .HasMaxLength(100)
                .HasColumnName("AddressNO");
            entity.Property(e => e.CoordinatorEmail)
                .HasMaxLength(100)
                .HasColumnName("Coordinator_Email");
            entity.Property(e => e.CoordinatorFax)
                .HasMaxLength(100)
                .HasColumnName("Coordinator_Fax");
            entity.Property(e => e.CoordinatorFirstName)
                .HasMaxLength(100)
                .HasColumnName("Coordinator_FirstName");
            entity.Property(e => e.CoordinatorLastName)
                .HasMaxLength(100)
                .HasColumnName("Coordinator_LastName");
            entity.Property(e => e.CoordinatorPhone)
                .HasMaxLength(100)
                .HasColumnName("Coordinator_Phone");
            entity.Property(e => e.CoordinatorPositionName)
                .HasMaxLength(250)
                .HasColumnName("Coordinator_PositionName");
            entity.Property(e => e.CoordinatorTitleName).HasColumnName("Coordinator_TitleName");
            entity.Property(e => e.CreatedDate).HasColumnType("timestamp without time zone");
            entity.Property(e => e.DeletedDate).HasColumnType("timestamp without time zone");
            entity.Property(e => e.Email).HasMaxLength(100);
            entity.Property(e => e.EmailVerifiedDate).HasColumnType("timestamp without time zone");
            entity.Property(e => e.Fax).HasMaxLength(100);
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.IdentityId)
                .HasMaxLength(100)
                .HasColumnName("IdentityID");
            entity.Property(e => e.LastUpdatedDate).HasColumnType("timestamp without time zone");
            entity.Property(e => e.LocationLatitude)
                .HasMaxLength(100)
                .HasColumnName("Location_Latitude");
            entity.Property(e => e.LocationLongtitude)
                .HasMaxLength(100)
                .HasColumnName("Location_Longtitude");
            entity.Property(e => e.LocationPhotoBase64).HasColumnName("Location_PhotoBase64");
            entity.Property(e => e.LogoPhotoBase64).HasColumnName("Logo_PhotoBase64");
            entity.Property(e => e.NameTh)
                .HasMaxLength(100)
                .HasColumnName("NameTH");
            entity.Property(e => e.Phone).HasMaxLength(100);
            entity.Property(e => e.SchoolPartnerOfficerApplicationUser).HasColumnName("SchoolPartnerOfficer_ApplicationUser");
            entity.Property(e => e.SchoolPartnerOfficerSchool).HasColumnName("SchoolPartnerOfficer_School");
            entity.Property(e => e.SocialSecurityNumber).HasMaxLength(100);
            entity.Property(e => e.WebSiteUrl)
                .HasMaxLength(100)
                .HasColumnName("WebSiteURL");

            entity.HasOne(d => d.ApplicationUserNavigation).WithMany(p => p.EmployerProfileApplicationUserNavigations)
                .HasForeignKey(d => d.ApplicationUser)
                .HasConstraintName("FK_EmployerProfile_ApplicationUser");

            entity.HasOne(d => d.BusinessTypeNavigation).WithMany(p => p.EmployerProfiles)
                .HasForeignKey(d => d.BusinessType)
                .HasConstraintName("FK_EmployerProfile_BusinessType");

            entity.HasOne(d => d.CoordinatorTitleNameNavigation).WithMany(p => p.EmployerProfiles)
                .HasForeignKey(d => d.CoordinatorTitleName)
                .HasConstraintName("FK_EmployerProfile_Coordinator_TitleName");

            entity.HasOne(d => d.DistrictNavigation).WithMany(p => p.EmployerProfiles)
                .HasForeignKey(d => d.District)
                .HasConstraintName("FK_EmployerProfile_District");

            entity.HasOne(d => d.EmployerMainBusinessTypeNavigation).WithMany(p => p.EmployerProfiles)
                .HasForeignKey(d => d.EmployerMainBusinessType)
                .HasConstraintName("FK_EmployerProfile_EmployerMainBusinessType");

            entity.HasOne(d => d.EmployerProfileStatusNavigation).WithMany(p => p.EmployerProfiles)
                .HasForeignKey(d => d.EmployerProfileStatus)
                .HasConstraintName("FK_EmployerProfile_EmployerProfileStatus");

            entity.HasOne(d => d.EmployerProfileTypeNavigation).WithMany(p => p.EmployerProfiles)
                .HasForeignKey(d => d.EmployerProfileType)
                .HasConstraintName("FK_EmployerProfile_EmployerProfileType");

            entity.HasOne(d => d.ProvinceNavigation).WithMany(p => p.EmployerProfiles)
                .HasForeignKey(d => d.Province)
                .HasConstraintName("FK_EmployerProfile_Province");

            entity.HasOne(d => d.SchoolPartnerOfficerApplicationUserNavigation).WithMany(p => p.EmployerProfileSchoolPartnerOfficerApplicationUserNavigations)
                .HasForeignKey(d => d.SchoolPartnerOfficerApplicationUser)
                .HasConstraintName("FK_EmployerProfile_SchoolPartnerOfficer_ApplicationUser");

            entity.HasOne(d => d.SchoolPartnerOfficerSchoolNavigation).WithMany(p => p.EmployerProfiles)
                .HasForeignKey(d => d.SchoolPartnerOfficerSchool)
                .HasConstraintName("FK_EmployerProfile_SchoolPartnerOfficer_School");

            entity.HasOne(d => d.TambonNavigation).WithMany(p => p.EmployerProfiles)
                .HasForeignKey(d => d.Tambon)
                .HasConstraintName("FK_EmployerProfile_Tambon");
        });

        modelBuilder.Entity<EmployerProfileStatus>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("EmployerProfileStatus_pkey");

            entity.ToTable("EmployerProfileStatus");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_EmployerProfileStatus");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.Code).HasMaxLength(100);
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.NameTh)
                .HasMaxLength(100)
                .HasColumnName("NameTH");
        });

        modelBuilder.Entity<EmployerProfileType>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("EmployerProfileType_pkey");

            entity.ToTable("EmployerProfileType");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_EmployerProfileType");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.Code).HasMaxLength(100);
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.NameTh)
                .HasMaxLength(100)
                .HasColumnName("NameTH");
        });

        modelBuilder.Entity<EmployerSchoolContact>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("EmployerSchoolContact_pkey");

            entity.ToTable("EmployerSchoolContact");

            entity.HasIndex(e => e.EmployerProfile, "iEmployerProfile_EmployerSchoolContact");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_EmployerSchoolContact");

            entity.HasIndex(e => e.School, "iSchool_EmployerSchoolContact");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.FullName).HasMaxLength(100);
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.Phone).HasMaxLength(100);

            entity.HasOne(d => d.EmployerProfileNavigation).WithMany(p => p.EmployerSchoolContacts)
                .HasForeignKey(d => d.EmployerProfile)
                .HasConstraintName("FK_EmployerSchoolContact_EmployerProfile");

            entity.HasOne(d => d.SchoolNavigation).WithMany(p => p.EmployerSchoolContacts)
                .HasForeignKey(d => d.School)
                .HasConstraintName("FK_EmployerSchoolContact_School");
        });

        modelBuilder.Entity<EmployerSummary>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("EmployerSummary_pkey");

            entity.ToTable("EmployerSummary");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_EmployerSummary");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.BranchNo)
                .HasMaxLength(100)
                .HasColumnName("Branch_NO");
            entity.Property(e => e.DontKnowIdentityId).HasColumnName("DontKnowIdentityID");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.IdentityId)
                .HasMaxLength(100)
                .HasColumnName("IdentityID");
            entity.Property(e => e.NameTh).HasColumnName("NameTH");
            entity.Property(e => e.ProvinceCode)
                .HasMaxLength(100)
                .HasColumnName("Province_Code");
            entity.Property(e => e.ProvinceName)
                .HasMaxLength(100)
                .HasColumnName("Province_Name");
            entity.Property(e => e.Zipcode)
                .HasMaxLength(100)
                .HasColumnName("ZIPCODE");
        });

        modelBuilder.Entity<EmploymentCategory>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("EmploymentCategory_pkey");

            entity.ToTable("EmploymentCategory");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_EmploymentCategory");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.Code).HasMaxLength(100);
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.Name).HasMaxLength(100);
        });

        modelBuilder.Entity<EmploymentStatus>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("EmploymentStatus_pkey");

            entity.ToTable("EmploymentStatus");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_EmploymentStatus");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.Code).HasMaxLength(100);
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.Name).HasMaxLength(100);
        });

        modelBuilder.Entity<EntityStatus>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("EntityStatus_pkey");

            entity.ToTable("EntityStatus");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_EntityStatus");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.StatusCode).HasMaxLength(100);
            entity.Property(e => e.StatusGroupName).HasMaxLength(100);
            entity.Property(e => e.StatusName).HasMaxLength(100);
        });

        modelBuilder.Entity<Event>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.ToTable("Event");

            entity.HasIndex(e => e.EndOn, "iEndOn_Event");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_Event");

            entity.HasIndex(e => e.RecurrencePattern, "iRecurrencePattern_Event");

            entity.HasIndex(e => e.StartOn, "iStartOn_Event");

            entity.Property(e => e.Oid).ValueGeneratedNever();
            entity.Property(e => e.AlarmTime).HasColumnType("timestamp without time zone");
            entity.Property(e => e.EndOn).HasColumnType("timestamp without time zone");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.Location).HasMaxLength(100);
            entity.Property(e => e.ReminderInfoXml).HasMaxLength(200);
            entity.Property(e => e.StartOn).HasColumnType("timestamp without time zone");
            entity.Property(e => e.Subject).HasMaxLength(250);

            entity.HasOne(d => d.RecurrencePatternNavigation).WithMany(p => p.InverseRecurrencePatternNavigation)
                .HasForeignKey(d => d.RecurrencePattern)
                .HasConstraintName("FK_Event_RecurrencePattern");
        });

        modelBuilder.Entity<FileAttachment>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("FileAttachment_pkey");

            entity.ToTable("FileAttachment");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_FileAttachment");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.Extension)
                .HasMaxLength(100)
                .HasColumnName("extension");
            entity.Property(e => e.Filename).HasColumnName("filename");
            entity.Property(e => e.Fileprefixpath).HasColumnName("fileprefixpath");
            entity.Property(e => e.Fullpath).HasColumnName("fullpath");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.Realfilename).HasColumnName("realfilename");
            entity.Property(e => e.Size).HasColumnName("size");
        });

        modelBuilder.Entity<FileDatum>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_FileData");

            entity.Property(e => e.Oid).ValueGeneratedNever();
            entity.Property(e => e.FileName).HasMaxLength(260);
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.Size).HasColumnName("size");
        });

        modelBuilder.Entity<Government>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("Government_pkey");

            entity.ToTable("Government");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_Government");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.NameTh)
                .HasMaxLength(120)
                .HasColumnName("nameTh");
        });

        modelBuilder.Entity<GraduatedStudent>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("GraduatedStudent_pkey");

            entity.ToTable("GraduatedStudent");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_GraduatedStudent");

            entity.HasIndex(e => e.SchoolGraduatedStudent, "iSchoolGraduatedStudent_GraduatedStudent");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.Birthday)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("birthday");
            entity.Property(e => e.BloodName)
                .HasMaxLength(2)
                .HasColumnName("bloodName");
            entity.Property(e => e.EditDateEmploymentStatus).HasMaxLength(100);
            entity.Property(e => e.Email)
                .HasMaxLength(75)
                .HasColumnName("email");
            entity.Property(e => e.EmploymentStatusName).HasMaxLength(100);
            entity.Property(e => e.EntranceDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("entranceDate");
            entity.Property(e => e.EntranceSemester)
                .HasMaxLength(1)
                .HasColumnName("entranceSemester");
            entity.Property(e => e.EntranceYear)
                .HasMaxLength(4)
                .HasColumnName("entranceYear");
            entity.Property(e => e.Fax)
                .HasMaxLength(20)
                .HasColumnName("fax");
            entity.Property(e => e.Firstname)
                .HasMaxLength(120)
                .HasColumnName("firstname");
            entity.Property(e => e.FirstnameEn)
                .HasMaxLength(120)
                .HasColumnName("firstnameEn");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.Gender)
                .HasMaxLength(1)
                .HasColumnName("gender");
            entity.Property(e => e.Gpax)
                .HasMaxLength(5)
                .HasColumnName("gpax");
            entity.Property(e => e.GradeId)
                .HasMaxLength(50)
                .HasColumnName("gradeID");
            entity.Property(e => e.GradeNameTh)
                .HasMaxLength(50)
                .HasColumnName("gradeNameTh");
            entity.Property(e => e.GraduateCode)
                .HasMaxLength(50)
                .HasColumnName("graduateCode");
            entity.Property(e => e.GraduateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("graduateDate");
            entity.Property(e => e.GraduatedSemesters).HasMaxLength(100);
            entity.Property(e => e.GraduatedYearTh)
                .HasMaxLength(4)
                .HasColumnName("GraduatedYearTH");
            entity.Property(e => e.GroupAbbr)
                .HasMaxLength(50)
                .HasColumnName("groupAbbr");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(10)
                .HasColumnName("groupCode");
            entity.Property(e => e.GroupName)
                .HasMaxLength(50)
                .HasColumnName("groupName");
            entity.Property(e => e.HouseId)
                .HasMaxLength(25)
                .HasColumnName("houseId");
            entity.Property(e => e.HouseNumber)
                .HasMaxLength(100)
                .HasColumnName("houseNumber");
            entity.Property(e => e.Idcard)
                .HasMaxLength(13)
                .HasColumnName("idcard");
            entity.Property(e => e.MajorCode)
                .HasMaxLength(5)
                .HasColumnName("majorCode");
            entity.Property(e => e.MajorId)
                .HasMaxLength(5)
                .HasColumnName("majorID");
            entity.Property(e => e.MajorNameTh)
                .HasMaxLength(100)
                .HasColumnName("majorNameTh");
            entity.Property(e => e.Middlename)
                .HasMaxLength(50)
                .HasColumnName("middlename");
            entity.Property(e => e.MinorCode)
                .HasMaxLength(7)
                .HasColumnName("minorCode");
            entity.Property(e => e.MinorId)
                .HasMaxLength(5)
                .HasColumnName("minorID");
            entity.Property(e => e.MinorNameTh)
                .HasMaxLength(100)
                .HasColumnName("minorNameTh");
            entity.Property(e => e.Moo)
                .HasMaxLength(20)
                .HasColumnName("moo");
            entity.Property(e => e.NationalityId)
                .HasMaxLength(3)
                .HasColumnName("nationalityID");
            entity.Property(e => e.Nickname)
                .HasMaxLength(50)
                .HasColumnName("nickname");
            entity.Property(e => e.ParentFirstname)
                .HasMaxLength(120)
                .HasColumnName("parentFirstname");
            entity.Property(e => e.ParentPhone)
                .HasMaxLength(100)
                .HasColumnName("parentPhone");
            entity.Property(e => e.ParentPrefixId)
                .HasMaxLength(50)
                .HasColumnName("parentPrefixId");
            entity.Property(e => e.ParentRelation)
                .HasMaxLength(100)
                .HasColumnName("parentRelation");
            entity.Property(e => e.ParentSurname)
                .HasMaxLength(120)
                .HasColumnName("parentSurname");
            entity.Property(e => e.PrefixId)
                .HasMaxLength(50)
                .HasColumnName("prefixID");
            entity.Property(e => e.RaceId)
                .HasMaxLength(3)
                .HasColumnName("raceID");
            entity.Property(e => e.ReligionId)
                .HasMaxLength(6)
                .HasColumnName("religionID");
            entity.Property(e => e.SchoolCode).HasMaxLength(100);
            entity.Property(e => e.SchoolName)
                .HasMaxLength(150)
                .HasColumnName("schoolName");
            entity.Property(e => e.Soi)
                .HasMaxLength(80)
                .HasColumnName("soi");
            entity.Property(e => e.Street)
                .HasMaxLength(80)
                .HasColumnName("street");
            entity.Property(e => e.StudentCode)
                .HasMaxLength(20)
                .HasColumnName("studentCode");
            entity.Property(e => e.StudentId)
                .HasMaxLength(10)
                .HasColumnName("studentID");
            entity.Property(e => e.StudentStatusCode)
                .HasMaxLength(50)
                .HasColumnName("studentStatusCode");
            entity.Property(e => e.StudentStatusName)
                .HasMaxLength(150)
                .HasColumnName("studentStatusName");
            entity.Property(e => e.StudentTypeCode)
                .HasMaxLength(2)
                .HasColumnName("studentTypeCode");
            entity.Property(e => e.StudentTypeName)
                .HasMaxLength(100)
                .HasColumnName("studentTypeName");
            entity.Property(e => e.Surname)
                .HasMaxLength(120)
                .HasColumnName("surname");
            entity.Property(e => e.SurnameEn)
                .HasMaxLength(120)
                .HasColumnName("surnameEn");
            entity.Property(e => e.Tel)
                .HasMaxLength(20)
                .HasColumnName("tel");
            entity.Property(e => e.TumbolCode)
                .HasMaxLength(6)
                .HasColumnName("tumbolCode");
            entity.Property(e => e.ZipCode)
                .HasMaxLength(5)
                .HasColumnName("zipCode");

            entity.HasOne(d => d.SchoolGraduatedStudentNavigation).WithMany(p => p.GraduatedStudents)
                .HasForeignKey(d => d.SchoolGraduatedStudent)
                .HasConstraintName("FK_GraduatedStudent_SchoolGraduatedStudent");
        });

        modelBuilder.Entity<GraduatedStudentJobTrackingReport>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("GraduatedStudentJobTrackingReport_pkey");

            entity.ToTable("GraduatedStudentJobTrackingReport");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_GraduatedStudentJobTrackingReport");

            entity.HasIndex(e => e.GraduatedStudentJobTrackingReportMain, "iGraduatedStudentJobTrackingReportMain_GraduatedStuden_506CC8F2");

            entity.HasIndex(e => e.ImportStudentDataStatus, "iImportStudentData_Status_GraduatedStudentJobTrackingReport");

            entity.HasIndex(e => e.JobTrackingStatus, "iJobTracking_Status_GraduatedStudentJobTrackingReport");

            entity.HasIndex(e => e.School, "iSchool_GraduatedStudentJobTrackingReport");

            entity.HasIndex(e => e.SenderToComplete, "iSenderToComplete_GraduatedStudentJobTrackingReport");

            entity.HasIndex(e => e.SenderToConfirm, "iSenderToConfirm_GraduatedStudentJobTrackingReport");

            entity.HasIndex(e => e.VerifyManager, "iVerifyManager_GraduatedStudentJobTrackingReport");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.CertifiedDate).HasColumnType("timestamp without time zone");
            entity.Property(e => e.CertifierName).HasMaxLength(100);
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.ImportStudentDataStatus).HasColumnName("ImportStudentData_Status");
            entity.Property(e => e.ImportStudentDataStatusUpdatedDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ImportStudentData_Status_UpdatedDate");
            entity.Property(e => e.JobTrackingStatus).HasColumnName("JobTracking_Status");
            entity.Property(e => e.JobTrackingStatusUpdatedDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("JobTracking_Status_UpdatedDate");
            entity.Property(e => e.QuantityOfGraduatedStudentJobTrackingReportStudentDetails).HasColumnName("QuantityOfGraduatedStudentJobTrackingReport_StudentDetails");
            entity.Property(e => e.SchoolId)
                .HasMaxLength(100)
                .HasColumnName("SchoolID");
            entity.Property(e => e.SchoolName).HasMaxLength(250);
            entity.Property(e => e.SchoolProvinceName).HasMaxLength(250);
            entity.Property(e => e.TargetGraduatedYearTh)
                .HasMaxLength(4)
                .HasColumnName("TargetGraduatedYearTH");
            entity.Property(e => e.TrackingEndDate).HasColumnType("timestamp without time zone");
            entity.Property(e => e.TrackingStartDate).HasColumnType("timestamp without time zone");

            entity.HasOne(d => d.GraduatedStudentJobTrackingReportMainNavigation).WithMany(p => p.GraduatedStudentJobTrackingReports)
                .HasForeignKey(d => d.GraduatedStudentJobTrackingReportMain)
                .HasConstraintName("FK_GraduatedStudentJobTrackingReport_GraduatedStudentJ_0423AC4A");

            entity.HasOne(d => d.ImportStudentDataStatusNavigation).WithMany(p => p.GraduatedStudentJobTrackingReportImportStudentDataStatusNavigations)
                .HasForeignKey(d => d.ImportStudentDataStatus)
                .HasConstraintName("FK_GraduatedStudentJobTrackingReport_ImportStudentData_Status");

            entity.HasOne(d => d.JobTrackingStatusNavigation).WithMany(p => p.GraduatedStudentJobTrackingReportJobTrackingStatusNavigations)
                .HasForeignKey(d => d.JobTrackingStatus)
                .HasConstraintName("FK_GraduatedStudentJobTrackingReport_JobTracking_Status");

            entity.HasOne(d => d.SchoolNavigation).WithMany(p => p.GraduatedStudentJobTrackingReports)
                .HasForeignKey(d => d.School)
                .HasConstraintName("FK_GraduatedStudentJobTrackingReport_School");

            entity.HasOne(d => d.SenderToCompleteNavigation).WithMany(p => p.GraduatedStudentJobTrackingReportSenderToCompleteNavigations)
                .HasForeignKey(d => d.SenderToComplete)
                .HasConstraintName("FK_GraduatedStudentJobTrackingReport_SenderToComplete");

            entity.HasOne(d => d.SenderToConfirmNavigation).WithMany(p => p.GraduatedStudentJobTrackingReportSenderToConfirmNavigations)
                .HasForeignKey(d => d.SenderToConfirm)
                .HasConstraintName("FK_GraduatedStudentJobTrackingReport_SenderToConfirm");

            entity.HasOne(d => d.VerifyManagerNavigation).WithMany(p => p.GraduatedStudentJobTrackingReports)
                .HasForeignKey(d => d.VerifyManager)
                .HasConstraintName("FK_GraduatedStudentJobTrackingReport_VerifyManager");
        });

        modelBuilder.Entity<GraduatedStudentJobTrackingReportActivity>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("GraduatedStudentJobTrackingReportActivity_pkey");

            entity.ToTable("GraduatedStudentJobTrackingReportActivity");

            entity.HasIndex(e => e.Activity, "iActivity_GraduatedStudentJobTrackingReportActivity");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_GraduatedStudentJobTrackingReportActivity");

            entity.HasIndex(e => e.GraduatedStudentJobTrackingReport, "iGraduatedStudentJobTrackingReport_GraduatedStudentJob_EA368857");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.Date).HasColumnType("timestamp without time zone");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");

            entity.HasOne(d => d.ActivityNavigation).WithMany(p => p.GraduatedStudentJobTrackingReportActivities)
                .HasForeignKey(d => d.Activity)
                .HasConstraintName("FK_GraduatedStudentJobTrackingReportActivity_Activity");

            entity.HasOne(d => d.GraduatedStudentJobTrackingReportNavigation).WithMany(p => p.GraduatedStudentJobTrackingReportActivities)
                .HasForeignKey(d => d.GraduatedStudentJobTrackingReport)
                .HasConstraintName("FK_GraduatedStudentJobTrackingReportActivity_Graduated_86B4C126");
        });

        modelBuilder.Entity<GraduatedStudentJobTrackingReportMain>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("GraduatedStudentJobTrackingReportMain_pkey");

            entity.ToTable("GraduatedStudentJobTrackingReportMain");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_GraduatedStudentJobTrackingReportMain");

            entity.HasIndex(e => e.ImportStudentDataStatus, "iImportStudentData_Status_GraduatedStudentJobTrackingReportMain");

            entity.HasIndex(e => e.JobTrackingStatus, "iJobTracking_Status_GraduatedStudentJobTrackingReportMain");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.ImportStudentDataStatus).HasColumnName("ImportStudentData_Status");
            entity.Property(e => e.ImportStudentDataStatusUpdatedDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ImportStudentData_Status_UpdatedDate");
            entity.Property(e => e.JobTrackingStatus).HasColumnName("JobTracking_Status");
            entity.Property(e => e.JobTrackingStatusUpdatedDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("JobTracking_Status_UpdatedDate");
            entity.Property(e => e.TargetGraduatedYearTh)
                .HasMaxLength(4)
                .HasColumnName("TargetGraduatedYearTH");
            entity.Property(e => e.TrackingEndDate).HasColumnType("timestamp without time zone");
            entity.Property(e => e.TrackingStartDate).HasColumnType("timestamp without time zone");

            entity.HasOne(d => d.ImportStudentDataStatusNavigation).WithMany(p => p.GraduatedStudentJobTrackingReportMainImportStudentDataStatusNavigations)
                .HasForeignKey(d => d.ImportStudentDataStatus)
                .HasConstraintName("FK_GraduatedStudentJobTrackingReportMain_ImportStudent_7D154E96");

            entity.HasOne(d => d.JobTrackingStatusNavigation).WithMany(p => p.GraduatedStudentJobTrackingReportMainJobTrackingStatusNavigations)
                .HasForeignKey(d => d.JobTrackingStatus)
                .HasConstraintName("FK_GraduatedStudentJobTrackingReportMain_JobTracking_Status");
        });

        modelBuilder.Entity<GraduatedStudentJobTrackingReportStudentDetail>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("GraduatedStudentJobTrackingReport_StudentDetail_pkey");

            entity.ToTable("GraduatedStudentJobTrackingReport_StudentDetail");

            entity.HasIndex(e => e.ContinuetoStudyLevel, "continuetostudy_index");

            entity.HasIndex(e => e.EmploymentStatus, "employmentstatus");

            entity.HasIndex(e => e.EmploymentStatus, "iEmploymentStatus_GraduatedStudentJobTrackingReport_St_DD3A9494");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_GraduatedStudentJobTrackingReport_StudentDetail");

            entity.HasIndex(e => e.GraduatedStudentJobTrackingReport, "iGraduatedStudentJobTrackingReport_GraduatedStudentJob_7B8D1A6B");

            entity.HasIndex(e => e.Student, "iStudent_GraduatedStudentJobTrackingReport_StudentDetail");

            entity.HasIndex(e => e.StudentVeceducationInformation, "iStudent_VECEducationInformation_GraduatedStudentJobTr_06E9A79F");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.ContinueToStudyInRelatedFieldStatusName).HasMaxLength(100);
            entity.Property(e => e.CorporationName).HasMaxLength(250);
            entity.Property(e => e.CorporationTaxId)
                .HasMaxLength(100)
                .HasColumnName("CorporationTaxID");
            entity.Property(e => e.EditDate).HasColumnType("timestamp without time zone");
            entity.Property(e => e.EmployerSummaryOid)
                .HasMaxLength(150)
                .HasColumnName("EmployerSummary_Oid");
            entity.Property(e => e.EmploymentStatusName).HasMaxLength(100);
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.GettingJobThatRelatedWithStudiedFieldStatusName).HasMaxLength(100);
            entity.Property(e => e.JobPositionCode).HasMaxLength(100);
            entity.Property(e => e.JobPositionName).HasMaxLength(250);
            entity.Property(e => e.Jobdescription)
                .HasMaxLength(120)
                .HasColumnName("jobdescription");
            entity.Property(e => e.Major)
                .HasMaxLength(120)
                .HasColumnName("major");
            entity.Property(e => e.Minor)
                .HasMaxLength(120)
                .HasColumnName("minor");
            entity.Property(e => e.OtherDescription).HasColumnName("Other_Description");
            entity.Property(e => e.SalaryRange).HasMaxLength(250);
            entity.Property(e => e.SchoolId).HasMaxLength(100);
            entity.Property(e => e.Semester).HasMaxLength(100);
            entity.Property(e => e.StudentVeceducationInformation).HasColumnName("Student_VECEducationInformation");
            entity.Property(e => e.StudyCourseTypeName).HasMaxLength(100);
            entity.Property(e => e.TrackingYearTh).HasMaxLength(4);
            entity.Property(e => e.UnknownRemark).HasColumnName("Unknown_Remark");

            entity.HasOne(d => d.EmploymentStatusNavigation).WithMany(p => p.GraduatedStudentJobTrackingReportStudentDetails)
                .HasForeignKey(d => d.EmploymentStatus)
                .HasConstraintName("FK_GraduatedStudentJobTrackingReport_StudentDetail_Emp_C74373F0");

            entity.HasOne(d => d.GraduatedStudentJobTrackingReportNavigation).WithMany(p => p.GraduatedStudentJobTrackingReportStudentDetails)
                .HasForeignKey(d => d.GraduatedStudentJobTrackingReport)
                .HasConstraintName("FK_GraduatedStudentJobTrackingReport_StudentDetail_Gra_8F4F38ED");

            entity.HasOne(d => d.StudentNavigation).WithMany(p => p.GraduatedStudentJobTrackingReportStudentDetails)
                .HasForeignKey(d => d.Student)
                .HasConstraintName("FK_GraduatedStudentJobTrackingReport_StudentDetail_Student");

            entity.HasOne(d => d.StudentVeceducationInformationNavigation).WithMany(p => p.GraduatedStudentJobTrackingReportStudentDetails)
                .HasForeignKey(d => d.StudentVeceducationInformation)
                .HasConstraintName("FK_GraduatedStudentJobTrackingReport_StudentDetail_Stu_1393FDAE");
        });

        modelBuilder.Entity<Hcategory>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.ToTable("HCategory");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_HCategory");

            entity.HasIndex(e => e.Parent, "iParent_HCategory");

            entity.Property(e => e.Oid).ValueGeneratedNever();
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.Name).HasMaxLength(100);

            entity.HasOne(d => d.ParentNavigation).WithMany(p => p.InverseParentNavigation)
                .HasForeignKey(d => d.Parent)
                .HasConstraintName("FK_HCategory_Parent");
        });

        modelBuilder.Entity<IdgeneratorTable>(entity =>
        {
            entity.ToTable("IDGeneratorTable");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("ID");
            entity.Property(e => e.Prefix).HasMaxLength(100);
            entity.Property(e => e.Type).HasMaxLength(254);
        });

        modelBuilder.Entity<Industry>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("Industry_pkey");

            entity.ToTable("Industry");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_Industry");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.IndustryCode)
                .HasMaxLength(100)
                .HasColumnName("industryCode");
            entity.Property(e => e.IndustryId)
                .HasMaxLength(100)
                .HasColumnName("industryID");
            entity.Property(e => e.IndustryNameEn)
                .HasMaxLength(100)
                .HasColumnName("industryNameEn");
            entity.Property(e => e.IndustryNameTh)
                .HasMaxLength(100)
                .HasColumnName("industryNameTh");
        });

        modelBuilder.Entity<IndustryAndMinorMatching>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("IndustryAndMinorMatching_pkey");

            entity.ToTable("IndustryAndMinorMatching");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_IndustryAndMinorMatching");

            entity.HasIndex(e => e.Industry, "iIndustry_IndustryAndMinorMatching");

            entity.HasIndex(e => e.Minor, "iMinor_IndustryAndMinorMatching");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.IndustryCode)
                .HasMaxLength(100)
                .HasColumnName("industryCode");
            entity.Property(e => e.IndustryId)
                .HasMaxLength(100)
                .HasColumnName("industryID");
            entity.Property(e => e.MinorCode)
                .HasMaxLength(100)
                .HasColumnName("minorCode");
            entity.Property(e => e.MinorId)
                .HasMaxLength(100)
                .HasColumnName("minorID");

            entity.HasOne(d => d.IndustryNavigation).WithMany(p => p.IndustryAndMinorMatchings)
                .HasForeignKey(d => d.Industry)
                .HasConstraintName("FK_IndustryAndMinorMatching_Industry");

            entity.HasOne(d => d.MinorNavigation).WithMany(p => p.IndustryAndMinorMatchings)
                .HasForeignKey(d => d.Minor)
                .HasConstraintName("FK_IndustryAndMinorMatching_Minor");
        });

        modelBuilder.Entity<Institute>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("Institute_pkey");

            entity.ToTable("Institute");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_Institute");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .HasColumnName("email");
            entity.Property(e => e.Fax)
                .HasMaxLength(100)
                .HasColumnName("fax");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.HouseNumber)
                .HasMaxLength(100)
                .HasColumnName("houseNumber");
            entity.Property(e => e.InstituteCode)
                .HasMaxLength(100)
                .HasColumnName("instituteCode");
            entity.Property(e => e.InstituteId)
                .HasMaxLength(100)
                .HasColumnName("instituteID");
            entity.Property(e => e.InstituteNameTh)
                .HasMaxLength(100)
                .HasColumnName("instituteNameTh");
            entity.Property(e => e.Soi)
                .HasMaxLength(100)
                .HasColumnName("soi");
            entity.Property(e => e.Street)
                .HasMaxLength(100)
                .HasColumnName("street");
            entity.Property(e => e.Telephone)
                .HasMaxLength(100)
                .HasColumnName("telephone");
            entity.Property(e => e.VillageNumber)
                .HasMaxLength(100)
                .HasColumnName("villageNumber");
            entity.Property(e => e.Website)
                .HasMaxLength(100)
                .HasColumnName("website");
            entity.Property(e => e.Zipcode)
                .HasMaxLength(100)
                .HasColumnName("zipcode");
        });

        modelBuilder.Entity<JobApplication>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("JobApplication_pkey");

            entity.ToTable("JobApplication");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_JobApplication");

            entity.HasIndex(e => e.JobApplicationStatus, "iJobApplicationStatus_JobApplication");

            entity.HasIndex(e => e.JobPosting, "iJobPosting_JobApplication");

            entity.HasIndex(e => e.Student, "iStudent_JobApplication");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.CreatedDate).HasColumnType("timestamp without time zone");
            entity.Property(e => e.DeletedDate).HasColumnType("timestamp without time zone");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.InterviewDate).HasColumnType("timestamp without time zone");
            entity.Property(e => e.InterviewLocation).HasMaxLength(100);
            entity.Property(e => e.InterviewTime).HasMaxLength(100);
            entity.Property(e => e.JobApplicationStatusUpdatedDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("JobApplicationStatus_UpdatedDate");
            entity.Property(e => e.NotifyMessage).HasMaxLength(1000);
            entity.Property(e => e.UpdatedDate).HasColumnType("timestamp without time zone");

            entity.HasOne(d => d.JobApplicationStatusNavigation).WithMany(p => p.JobApplications)
                .HasForeignKey(d => d.JobApplicationStatus)
                .HasConstraintName("FK_JobApplication_JobApplicationStatus");

            entity.HasOne(d => d.JobPostingNavigation).WithMany(p => p.JobApplications)
                .HasForeignKey(d => d.JobPosting)
                .HasConstraintName("FK_JobApplication_JobPosting");

            entity.HasOne(d => d.StudentNavigation).WithMany(p => p.JobApplications)
                .HasForeignKey(d => d.Student)
                .HasConstraintName("FK_JobApplication_Student");
        });

        modelBuilder.Entity<JobPosition>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("JobPosition_pkey");

            entity.ToTable("JobPosition");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_JobPosition");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.Code).HasMaxLength(100);
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
        });

        modelBuilder.Entity<JobPositionMatching>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("JobPositionMatching_pkey");

            entity.ToTable("JobPositionMatching");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_JobPositionMatching");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.MajorCode)
                .HasMaxLength(100)
                .HasColumnName("majorCode");
            entity.Property(e => e.MinorCode)
                .HasMaxLength(100)
                .HasColumnName("minorCode");
            entity.Property(e => e.PositionName).HasMaxLength(100);
            entity.Property(e => e.SubjectTypeCode)
                .HasMaxLength(100)
                .HasColumnName("subjectTypeCode");
        });

        modelBuilder.Entity<JobPosting>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("JobPosting_pkey");

            entity.ToTable("JobPosting");

            entity.HasIndex(e => e.ApplicantRequiredCertificateType, "iApplicant_RequiredCertificateType_JobPosting");

            entity.HasIndex(e => e.EmployerProfile, "iEmployerProfile_JobPosting");

            entity.HasIndex(e => e.EmploymentCategory, "iEmploymentCategory_JobPosting");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_JobPosting");

            entity.HasIndex(e => e.JobPostingStatus, "iJobPostingStatus_JobPosting");

            entity.HasIndex(e => e.JobSegment, "iJobSegment_JobPosting");

            entity.HasIndex(e => e.PayRate, "iPayRate_JobPosting");

            entity.HasIndex(e => e.WorkingPlaceDistrict, "iWorkingPlace_District_JobPosting");

            entity.HasIndex(e => e.WorkingPlaceProvince, "iWorkingPlace_Province_JobPosting");

            entity.HasIndex(e => e.WorkingPlaceTambon, "iWorkingPlace_Tambon_JobPosting");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.ApplicantRequiredCertificateType).HasColumnName("Applicant_RequiredCertificateType");
            entity.Property(e => e.ApplicantRequiredGenderChoice).HasColumnName("Applicant_RequiredGenderChoice");
            entity.Property(e => e.ApplicantSpecification).HasColumnName("Applicant_Specification");
            entity.Property(e => e.CoordinatorEmail)
                .HasMaxLength(100)
                .HasColumnName("Coordinator_Email");
            entity.Property(e => e.CoordinatorFullName)
                .HasMaxLength(100)
                .HasColumnName("Coordinator_FullName");
            entity.Property(e => e.CoordinatorPhoneNo)
                .HasMaxLength(100)
                .HasColumnName("Coordinator_PhoneNO");
            entity.Property(e => e.CreatedDate).HasColumnType("timestamp without time zone");
            entity.Property(e => e.DeletedDate).HasColumnType("timestamp without time zone");
            entity.Property(e => e.EndDate).HasColumnType("timestamp without time zone");
            entity.Property(e => e.ExpiredDate).HasColumnType("timestamp without time zone");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.JobPostingId)
                .HasMaxLength(250)
                .HasColumnName("JobPosting_ID");
            entity.Property(e => e.JobPostingStatusUpdatedDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("JobPostingStatus_UpdatedDate");
            entity.Property(e => e.MaximumWage).HasPrecision(28, 8);
            entity.Property(e => e.MinimumWage).HasPrecision(28, 8);
            entity.Property(e => e.PositionName).HasMaxLength(100);
            entity.Property(e => e.StartDate).HasColumnType("timestamp without time zone");
            entity.Property(e => e.UpdatedDate).HasColumnType("timestamp without time zone");
            entity.Property(e => e.WorkingPlaceAddress).HasColumnName("WorkingPlace_Address");
            entity.Property(e => e.WorkingPlaceDistrict).HasColumnName("WorkingPlace_District");
            entity.Property(e => e.WorkingPlaceProvince).HasColumnName("WorkingPlace_Province");
            entity.Property(e => e.WorkingPlaceTambon).HasColumnName("WorkingPlace_Tambon");
            entity.Property(e => e.WorkingTimeEnd).HasMaxLength(100);
            entity.Property(e => e.WorkingTimeStart).HasMaxLength(100);

            entity.HasOne(d => d.ApplicantRequiredCertificateTypeNavigation).WithMany(p => p.JobPostings)
                .HasForeignKey(d => d.ApplicantRequiredCertificateType)
                .HasConstraintName("FK_JobPosting_Applicant_RequiredCertificateType");

            entity.HasOne(d => d.EmployerProfileNavigation).WithMany(p => p.JobPostings)
                .HasForeignKey(d => d.EmployerProfile)
                .HasConstraintName("FK_JobPosting_EmployerProfile");

            entity.HasOne(d => d.EmploymentCategoryNavigation).WithMany(p => p.JobPostings)
                .HasForeignKey(d => d.EmploymentCategory)
                .HasConstraintName("FK_JobPosting_EmploymentCategory");

            entity.HasOne(d => d.JobPostingStatusNavigation).WithMany(p => p.JobPostings)
                .HasForeignKey(d => d.JobPostingStatus)
                .HasConstraintName("FK_JobPosting_JobPostingStatus");

            entity.HasOne(d => d.JobSegmentNavigation).WithMany(p => p.JobPostings)
                .HasForeignKey(d => d.JobSegment)
                .HasConstraintName("FK_JobPosting_JobSegment");

            entity.HasOne(d => d.PayRateNavigation).WithMany(p => p.JobPostings)
                .HasForeignKey(d => d.PayRate)
                .HasConstraintName("FK_JobPosting_PayRate");

            entity.HasOne(d => d.WorkingPlaceDistrictNavigation).WithMany(p => p.JobPostings)
                .HasForeignKey(d => d.WorkingPlaceDistrict)
                .HasConstraintName("FK_JobPosting_WorkingPlace_District");

            entity.HasOne(d => d.WorkingPlaceProvinceNavigation).WithMany(p => p.JobPostings)
                .HasForeignKey(d => d.WorkingPlaceProvince)
                .HasConstraintName("FK_JobPosting_WorkingPlace_Province");

            entity.HasOne(d => d.WorkingPlaceTambonNavigation).WithMany(p => p.JobPostings)
                .HasForeignKey(d => d.WorkingPlaceTambon)
                .HasConstraintName("FK_JobPosting_WorkingPlace_Tambon");
        });

        modelBuilder.Entity<JobSegment>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("JobSegment_pkey");

            entity.ToTable("JobSegment");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_JobSegment");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.Code)
                .HasMaxLength(3)
                .HasColumnName("code");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.Name).HasColumnName("name");
        });

        modelBuilder.Entity<JobTrackingReportActivity>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("JobTrackingReportActivity_pkey");

            entity.ToTable("JobTrackingReportActivity");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_JobTrackingReportActivity");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.ActivityCode).HasMaxLength(100);
            entity.Property(e => e.ActivityName).HasMaxLength(250);
            entity.Property(e => e.Description).HasMaxLength(1000);
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
        });

        modelBuilder.Entity<KpiDefinition>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.ToTable("KpiDefinition");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_KpiDefinition");

            entity.HasIndex(e => e.KpiInstance, "iKpiInstance_KpiDefinition");

            entity.Property(e => e.Oid).ValueGeneratedNever();
            entity.Property(e => e.Changed).HasColumnType("timestamp without time zone");
            entity.Property(e => e.ChangedOn).HasColumnType("timestamp without time zone");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.Range).HasMaxLength(100);
            entity.Property(e => e.RangeToCompare).HasMaxLength(100);
            entity.Property(e => e.SuppressedSeries).HasMaxLength(100);

            entity.HasOne(d => d.KpiInstanceNavigation).WithMany(p => p.KpiDefinitions)
                .HasForeignKey(d => d.KpiInstance)
                .HasConstraintName("FK_KpiDefinition_KpiInstance");
        });

        modelBuilder.Entity<KpiHistoryItem>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.ToTable("KpiHistoryItem");

            entity.HasIndex(e => e.KpiInstance, "iKpiInstance_KpiHistoryItem");

            entity.Property(e => e.Oid).ValueGeneratedNever();
            entity.Property(e => e.RangeEnd).HasColumnType("timestamp without time zone");
            entity.Property(e => e.RangeStart).HasColumnType("timestamp without time zone");

            entity.HasOne(d => d.KpiInstanceNavigation).WithMany(p => p.KpiHistoryItems)
                .HasForeignKey(d => d.KpiInstance)
                .HasConstraintName("FK_KpiHistoryItem_KpiInstance");
        });

        modelBuilder.Entity<KpiInstance>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.ToTable("KpiInstance");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_KpiInstance");

            entity.HasIndex(e => e.KpiDefinition, "iKpiDefinition_KpiInstance");

            entity.Property(e => e.Oid).ValueGeneratedNever();
            entity.Property(e => e.ForceMeasurementDateTime).HasColumnType("timestamp without time zone");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");

            entity.HasOne(d => d.KpiDefinitionNavigation).WithMany(p => p.KpiInstances)
                .HasForeignKey(d => d.KpiDefinition)
                .HasConstraintName("FK_KpiInstance_KpiDefinition");
        });

        modelBuilder.Entity<KpiScorecard>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.ToTable("KpiScorecard");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_KpiScorecard");

            entity.Property(e => e.Oid).ValueGeneratedNever();
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.Name).HasMaxLength(100);
        });

        modelBuilder.Entity<KpiScorecardScorecardsKpiInstanceIndicator>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.ToTable("KpiScorecardScorecards_KpiInstanceIndicators");

            entity.HasIndex(e => new { e.Indicators, e.Scorecards }, "iIndicatorsScorecards_KpiScorecardScorecards_KpiInstan_87CEDA3B").IsUnique();

            entity.HasIndex(e => e.Indicators, "iIndicators_KpiScorecardScorecards_KpiInstanceIndicators");

            entity.HasIndex(e => e.Scorecards, "iScorecards_KpiScorecardScorecards_KpiInstanceIndicators");

            entity.Property(e => e.Oid)
                .ValueGeneratedNever()
                .HasColumnName("OID");

            entity.HasOne(d => d.IndicatorsNavigation).WithMany(p => p.KpiScorecardScorecardsKpiInstanceIndicators)
                .HasForeignKey(d => d.Indicators)
                .HasConstraintName("FK_KpiScorecardScorecards_KpiInstanceIndicators_Indicators");

            entity.HasOne(d => d.ScorecardsNavigation).WithMany(p => p.KpiScorecardScorecardsKpiInstanceIndicators)
                .HasForeignKey(d => d.Scorecards)
                .HasConstraintName("FK_KpiScorecardScorecards_KpiInstanceIndicators_Scorecards");
        });

        modelBuilder.Entity<LookingForJob>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("LookingForJob_pkey");

            entity.ToTable("LookingForJob");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_LookingForJob");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.Byday).HasColumnName("byday");
            entity.Property(e => e.Freelance).HasColumnName("freelance");
            entity.Property(e => e.Fulltime).HasColumnName("fulltime");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.Interestedjob1).HasColumnName("interestedjob1");
            entity.Property(e => e.Interestedjob2).HasColumnName("interestedjob2");
            entity.Property(e => e.Interestedjob3).HasColumnName("interestedjob3");
            entity.Property(e => e.Internship).HasColumnName("internship");
            entity.Property(e => e.Lookingforjobstatus).HasColumnName("lookingforjobstatus");
            entity.Property(e => e.Parttime).HasColumnName("parttime");
            entity.Property(e => e.Rangesalary)
                .HasMaxLength(100)
                .HasColumnName("rangesalary");
            entity.Property(e => e.Temporary).HasColumnName("temporary");
            entity.Property(e => e.Workfromhome).HasColumnName("workfromhome");
        });

        modelBuilder.Entity<Major>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("Major_pkey");

            entity.ToTable("Major");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_Major");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.MajorCode)
                .HasMaxLength(100)
                .HasColumnName("majorCode");
            entity.Property(e => e.MajorId)
                .HasMaxLength(100)
                .HasColumnName("majorID");
            entity.Property(e => e.MajorMoeCode)
                .HasMaxLength(100)
                .HasColumnName("majorMoeCode");
            entity.Property(e => e.MajorNameEn)
                .HasMaxLength(100)
                .HasColumnName("majorNameEn");
            entity.Property(e => e.MajorNameTh)
                .HasMaxLength(100)
                .HasColumnName("majorNameTh");
        });

        modelBuilder.Entity<MediaDataObject>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.ToTable("MediaDataObject");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_MediaDataObject");

            entity.Property(e => e.Oid).ValueGeneratedNever();
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.MediaDataKey).HasMaxLength(100);
        });

        modelBuilder.Entity<Minor>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("Minor_pkey");

            entity.ToTable("Minor");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_Minor");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.MinorCode)
                .HasMaxLength(100)
                .HasColumnName("minorCode");
            entity.Property(e => e.MinorId)
                .HasMaxLength(100)
                .HasColumnName("minorID");
            entity.Property(e => e.MinorMoeCode)
                .HasMaxLength(100)
                .HasColumnName("minorMoeCode");
            entity.Property(e => e.MinorNameEn)
                .HasMaxLength(100)
                .HasColumnName("minorNameEn");
            entity.Property(e => e.MinorNameTh)
                .HasMaxLength(100)
                .HasColumnName("minorNameTh");
        });

        modelBuilder.Entity<ModelDifference>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.ToTable("ModelDifference");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_ModelDifference");

            entity.Property(e => e.Oid).ValueGeneratedNever();
            entity.Property(e => e.ContextId).HasMaxLength(100);
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.UserId).HasMaxLength(100);
        });

        modelBuilder.Entity<ModelDifferenceAspect>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.ToTable("ModelDifferenceAspect");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_ModelDifferenceAspect");

            entity.HasIndex(e => e.Owner, "iOwner_ModelDifferenceAspect");

            entity.Property(e => e.Oid).ValueGeneratedNever();
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.Name).HasMaxLength(100);

            entity.HasOne(d => d.OwnerNavigation).WithMany(p => p.ModelDifferenceAspects)
                .HasForeignKey(d => d.Owner)
                .HasConstraintName("FK_ModelDifferenceAspect_Owner");
        });

        modelBuilder.Entity<ModificationInfo>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("ModificationInfo_pkey");

            entity.ToTable("ModificationInfo");

            entity.HasIndex(e => e.Audit, "iAudit_ModificationInfo");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_ModificationInfo");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.NewValue).HasMaxLength(100);
            entity.Property(e => e.OldValue).HasMaxLength(100);
            entity.Property(e => e.PropertyName).HasMaxLength(100);

            entity.HasOne(d => d.AuditNavigation).WithMany(p => p.ModificationInfos)
                .HasForeignKey(d => d.Audit)
                .HasConstraintName("FK_ModificationInfo_Audit");
        });

        modelBuilder.Entity<ModuleInfo>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ModuleInfo_pkey");

            entity.ToTable("ModuleInfo");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.AssemblyFileName).HasMaxLength(100);
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.Version).HasMaxLength(100);
        });

        modelBuilder.Entity<Nationality>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("Nationality_pkey");

            entity.ToTable("Nationality");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_Nationality");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.NationalityEng)
                .HasMaxLength(100)
                .HasColumnName("nationalityEng");
            entity.Property(e => e.NationalityId)
                .HasMaxLength(100)
                .HasColumnName("nationalityID");
            entity.Property(e => e.NationalityTh)
                .HasMaxLength(100)
                .HasColumnName("nationalityTh");
        });

        modelBuilder.Entity<Note>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.ToTable("Note");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_Note");

            entity.Property(e => e.Oid).ValueGeneratedNever();
            entity.Property(e => e.Author).HasMaxLength(100);
            entity.Property(e => e.DateTime).HasColumnType("timestamp without time zone");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
        });

        modelBuilder.Entity<NotificationConfiguration>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("NotificationConfiguration_pkey");

            entity.ToTable("NotificationConfiguration");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_NotificationConfiguration");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.NotificationEventKey).HasMaxLength(250);
        });

        modelBuilder.Entity<NotificationSetup>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("NotificationSetup_pkey");

            entity.ToTable("NotificationSetup");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_NotificationSetup");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.NotificationEventKey).HasMaxLength(500);
            entity.Property(e => e.NotificationEventName).HasMaxLength(1000);
        });

        modelBuilder.Entity<Organization>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.ToTable("Organization");

            entity.Property(e => e.Oid).ValueGeneratedNever();
            entity.Property(e => e.Email).HasMaxLength(100);
            entity.Property(e => e.FullName).HasMaxLength(100);
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.Profile).HasMaxLength(100);
            entity.Property(e => e.WebSite).HasMaxLength(100);

            entity.HasOne(d => d.OidNavigation).WithOne(p => p.Organization)
                .HasForeignKey<Organization>(d => d.Oid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Organization_Oid");
        });

        modelBuilder.Entity<OrganizationType>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("OrganizationType_pkey");

            entity.ToTable("OrganizationType");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_OrganizationType");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.Code).HasMaxLength(100);
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.NameTh)
                .HasMaxLength(100)
                .HasColumnName("NameTH");
        });

        modelBuilder.Entity<Party>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.ToTable("Party");

            entity.HasIndex(e => e.Address1, "iAddress1_Party");

            entity.HasIndex(e => e.Address2, "iAddress2_Party");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_Party");

            entity.HasIndex(e => e.ObjectType, "iObjectType_Party");

            entity.Property(e => e.Oid).ValueGeneratedNever();
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");

            entity.HasOne(d => d.Address1Navigation).WithMany(p => p.PartyAddress1Navigations)
                .HasForeignKey(d => d.Address1)
                .HasConstraintName("FK_Party_Address1");

            entity.HasOne(d => d.Address2Navigation).WithMany(p => p.PartyAddress2Navigations)
                .HasForeignKey(d => d.Address2)
                .HasConstraintName("FK_Party_Address2");

            entity.HasOne(d => d.ObjectTypeNavigation).WithMany(p => p.Parties)
                .HasForeignKey(d => d.ObjectType)
                .HasConstraintName("FK_Party_ObjectType");
        });

        modelBuilder.Entity<PayFrequency>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("PayFrequency_pkey");

            entity.ToTable("PayFrequency");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_PayFrequency");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.Code).HasMaxLength(100);
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.Name).HasMaxLength(100);
        });

        modelBuilder.Entity<PayRate>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("PayRate_pkey");

            entity.ToTable("PayRate");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_PayRate");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.Code).HasMaxLength(100);
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.Name).HasMaxLength(100);
        });

        modelBuilder.Entity<PermissionPolicyActionPermissionObject>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.ToTable("PermissionPolicyActionPermissionObject");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_PermissionPolicyActionPermissionObject");

            entity.HasIndex(e => e.Role, "iRole_PermissionPolicyActionPermissionObject");

            entity.Property(e => e.Oid).ValueGeneratedNever();
            entity.Property(e => e.ActionId).HasMaxLength(100);
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");

            entity.HasOne(d => d.RoleNavigation).WithMany(p => p.PermissionPolicyActionPermissionObjects)
                .HasForeignKey(d => d.Role)
                .HasConstraintName("FK_PermissionPolicyActionPermissionObject_Role");
        });

        modelBuilder.Entity<PermissionPolicyMemberPermissionsObject>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.ToTable("PermissionPolicyMemberPermissionsObject");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_PermissionPolicyMemberPermissionsObject");

            entity.HasIndex(e => e.TypePermissionObject, "iTypePermissionObject_PermissionPolicyMemberPermissionsObject");

            entity.Property(e => e.Oid).ValueGeneratedNever();
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");

            entity.HasOne(d => d.TypePermissionObjectNavigation).WithMany(p => p.PermissionPolicyMemberPermissionsObjects)
                .HasForeignKey(d => d.TypePermissionObject)
                .HasConstraintName("FK_PermissionPolicyMemberPermissionsObject_TypePermissionObject");
        });

        modelBuilder.Entity<PermissionPolicyNavigationPermissionsObject>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.ToTable("PermissionPolicyNavigationPermissionsObject");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_PermissionPolicyNavigationPermissionsObject");

            entity.HasIndex(e => e.Role, "iRole_PermissionPolicyNavigationPermissionsObject");

            entity.Property(e => e.Oid).ValueGeneratedNever();
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");

            entity.HasOne(d => d.RoleNavigation).WithMany(p => p.PermissionPolicyNavigationPermissionsObjects)
                .HasForeignKey(d => d.Role)
                .HasConstraintName("FK_PermissionPolicyNavigationPermissionsObject_Role");
        });

        modelBuilder.Entity<PermissionPolicyObjectPermissionsObject>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.ToTable("PermissionPolicyObjectPermissionsObject");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_PermissionPolicyObjectPermissionsObject");

            entity.HasIndex(e => e.TypePermissionObject, "iTypePermissionObject_PermissionPolicyObjectPermissionsObject");

            entity.Property(e => e.Oid).ValueGeneratedNever();
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");

            entity.HasOne(d => d.TypePermissionObjectNavigation).WithMany(p => p.PermissionPolicyObjectPermissionsObjects)
                .HasForeignKey(d => d.TypePermissionObject)
                .HasConstraintName("FK_PermissionPolicyObjectPermissionsObject_TypePermissionObject");
        });

        modelBuilder.Entity<PermissionPolicyRole>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.ToTable("PermissionPolicyRole");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_PermissionPolicyRole");

            entity.HasIndex(e => e.ObjectType, "iObjectType_PermissionPolicyRole");

            entity.Property(e => e.Oid).ValueGeneratedNever();
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.Name).HasMaxLength(100);

            entity.HasOne(d => d.ObjectTypeNavigation).WithMany(p => p.PermissionPolicyRoles)
                .HasForeignKey(d => d.ObjectType)
                .HasConstraintName("FK_PermissionPolicyRole_ObjectType");
        });

        modelBuilder.Entity<PermissionPolicyTypePermissionsObject>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.ToTable("PermissionPolicyTypePermissionsObject");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_PermissionPolicyTypePermissionsObject");

            entity.HasIndex(e => e.Role, "iRole_PermissionPolicyTypePermissionsObject");

            entity.Property(e => e.Oid).ValueGeneratedNever();
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");

            entity.HasOne(d => d.RoleNavigation).WithMany(p => p.PermissionPolicyTypePermissionsObjects)
                .HasForeignKey(d => d.Role)
                .HasConstraintName("FK_PermissionPolicyTypePermissionsObject_Role");
        });

        modelBuilder.Entity<PermissionPolicyUser>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.ToTable("PermissionPolicyUser");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_PermissionPolicyUser");

            entity.HasIndex(e => e.ObjectType, "iObjectType_PermissionPolicyUser");

            entity.Property(e => e.Oid).ValueGeneratedNever();
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.UserName).HasMaxLength(100);

            entity.HasOne(d => d.ObjectTypeNavigation).WithMany(p => p.PermissionPolicyUsers)
                .HasForeignKey(d => d.ObjectType)
                .HasConstraintName("FK_PermissionPolicyUser_ObjectType");
        });

        modelBuilder.Entity<PermissionPolicyUserUsersPermissionPolicyRoleRole>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.ToTable("PermissionPolicyUserUsers_PermissionPolicyRoleRoles");

            entity.HasIndex(e => new { e.Roles, e.Users }, "iRolesUsers_PermissionPolicyUserUsers_PermissionPolicyRoleRoles").IsUnique();

            entity.HasIndex(e => e.Roles, "iRoles_PermissionPolicyUserUsers_PermissionPolicyRoleRoles");

            entity.HasIndex(e => e.Users, "iUsers_PermissionPolicyUserUsers_PermissionPolicyRoleRoles");

            entity.Property(e => e.Oid)
                .ValueGeneratedNever()
                .HasColumnName("OID");

            entity.HasOne(d => d.RolesNavigation).WithMany(p => p.PermissionPolicyUserUsersPermissionPolicyRoleRoles)
                .HasForeignKey(d => d.Roles)
                .HasConstraintName("FK_PermissionPolicyUserUsers_PermissionPolicyRoleRoles_Roles");

            entity.HasOne(d => d.UsersNavigation).WithMany(p => p.PermissionPolicyUserUsersPermissionPolicyRoleRoles)
                .HasForeignKey(d => d.Users)
                .HasConstraintName("FK_PermissionPolicyUserUsers_PermissionPolicyRoleRoles_Users");
        });

        modelBuilder.Entity<Person>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.ToTable("Person");

            entity.Property(e => e.Oid).ValueGeneratedNever();
            entity.Property(e => e.Birthday).HasColumnType("timestamp without time zone");
            entity.Property(e => e.Email).HasMaxLength(255);
            entity.Property(e => e.FirstName).HasMaxLength(100);
            entity.Property(e => e.LastName).HasMaxLength(100);
            entity.Property(e => e.MiddleName).HasMaxLength(100);

            entity.HasOne(d => d.OidNavigation).WithOne(p => p.Person)
                .HasForeignKey<Person>(d => d.Oid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Person_Oid");
        });

        modelBuilder.Entity<PhoneNumber>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.ToTable("PhoneNumber");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_PhoneNumber");

            entity.HasIndex(e => e.Party, "iParty_PhoneNumber");

            entity.Property(e => e.Oid).ValueGeneratedNever();
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.Number).HasMaxLength(100);
            entity.Property(e => e.PhoneType).HasMaxLength(100);

            entity.HasOne(d => d.PartyNavigation).WithMany(p => p.PhoneNumbers)
                .HasForeignKey(d => d.Party)
                .HasConstraintName("FK_PhoneNumber_Party");
        });

        modelBuilder.Entity<PhoneType>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.ToTable("PhoneType");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_PhoneType");

            entity.Property(e => e.Oid).ValueGeneratedNever();
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.TypeName).HasMaxLength(100);
        });

        modelBuilder.Entity<PostLookingForJob>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("PostLookingForJob_pkey");

            entity.ToTable("PostLookingForJob");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_PostLookingForJob");

            entity.HasIndex(e => e.Student, "iStudent_PostLookingForJob");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");

            entity.HasOne(d => d.StudentNavigation).WithMany(p => p.PostLookingForJobs)
                .HasForeignKey(d => d.Student)
                .HasConstraintName("FK_PostLookingForJob_Student");
        });

        modelBuilder.Entity<PropertyBag>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.ToTable("PropertyBag");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_PropertyBag");

            entity.Property(e => e.Oid).ValueGeneratedNever();
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
        });

        modelBuilder.Entity<PropertyBagDescriptor>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.ToTable("PropertyBagDescriptor");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_PropertyBagDescriptor");

            entity.Property(e => e.Oid).ValueGeneratedNever();
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
        });

        modelBuilder.Entity<PropertyDescriptor>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.ToTable("PropertyDescriptor");

            entity.HasIndex(e => e.Code, "iCode_PropertyDescriptor").IsUnique();

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_PropertyDescriptor");

            entity.Property(e => e.Oid).ValueGeneratedNever();
            entity.Property(e => e.Code).HasMaxLength(4);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.Type).HasMaxLength(100);
        });

        modelBuilder.Entity<PropertyDescriptorPropertyDescriptorsPropertyBagDescr3ef9c1ed>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("PK_PropertyDescriptorPropertyDescriptors_PropertyBagDe_7547C1C5");

            entity.ToTable("PropertyDescriptorPropertyDescriptors_PropertyBagDescr_3EF9C1ED");

            entity.HasIndex(e => new { e.PropertyBags, e.PropertyDescriptors }, "iPropertyBagsPropertyDescriptors_PropertyDescriptorPro_DED58993").IsUnique();

            entity.HasIndex(e => e.PropertyBags, "iPropertyBags_PropertyDescriptorPropertyDescriptors_Pr_DD29C849");

            entity.HasIndex(e => e.PropertyDescriptors, "iPropertyDescriptors_PropertyDescriptorPropertyDescrip_9314BD02");

            entity.Property(e => e.Oid)
                .ValueGeneratedNever()
                .HasColumnName("OID");

            entity.HasOne(d => d.PropertyBagsNavigation).WithMany(p => p.PropertyDescriptorPropertyDescriptorsPropertyBagDescr3ef9c1eds)
                .HasForeignKey(d => d.PropertyBags)
                .HasConstraintName("FK_PropertyDescriptorPropertyDescriptors_PropertyBagDe_1EC39AED");

            entity.HasOne(d => d.PropertyDescriptorsNavigation).WithMany(p => p.PropertyDescriptorPropertyDescriptorsPropertyBagDescr3ef9c1eds)
                .HasForeignKey(d => d.PropertyDescriptors)
                .HasConstraintName("FK_PropertyDescriptorPropertyDescriptors_PropertyBagDe_2F600E39");
        });

        modelBuilder.Entity<PropertyValue>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.ToTable("PropertyValue");

            entity.HasIndex(e => e.Bag, "iBag_PropertyValue");

            entity.HasIndex(e => e.Descriptor, "iDescriptor_PropertyValue");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_PropertyValue");

            entity.HasIndex(e => e.WeakReference, "iWeakReference_PropertyValue");

            entity.Property(e => e.Oid).ValueGeneratedNever();
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.StrValue).HasMaxLength(100);

            entity.HasOne(d => d.BagNavigation).WithMany(p => p.PropertyValues)
                .HasForeignKey(d => d.Bag)
                .HasConstraintName("FK_PropertyValue_Bag");

            entity.HasOne(d => d.DescriptorNavigation).WithMany(p => p.PropertyValues)
                .HasForeignKey(d => d.Descriptor)
                .HasConstraintName("FK_PropertyValue_Descriptor");

            entity.HasOne(d => d.WeakReferenceNavigation).WithMany(p => p.PropertyValues)
                .HasForeignKey(d => d.WeakReference)
                .HasConstraintName("FK_PropertyValue_WeakReference");
        });

        modelBuilder.Entity<Province>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("Province_pkey");

            entity.ToTable("Province");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_Province");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.ProvinceEng).HasMaxLength(100);
            entity.Property(e => e.ProvinceId)
                .HasMaxLength(100)
                .HasColumnName("ProvinceID");
            entity.Property(e => e.ProvinceThai).HasMaxLength(100);
            entity.Property(e => e.ProvinceType).HasMaxLength(100);
            entity.Property(e => e.RegionAsCommon).HasMaxLength(100);
            entity.Property(e => e.RegionAsFormal).HasMaxLength(100);
            entity.Property(e => e.RegionAsVec)
                .HasMaxLength(100)
                .HasColumnName("RegionAsVEC");
        });

        modelBuilder.Entity<Religion>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("Religion_pkey");

            entity.ToTable("Religion");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_Religion");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.ReligionEng)
                .HasMaxLength(100)
                .HasColumnName("religionEng");
            entity.Property(e => e.ReligionId)
                .HasMaxLength(100)
                .HasColumnName("religionID");
            entity.Property(e => e.ReligionTh)
                .HasMaxLength(100)
                .HasColumnName("religionTh");
        });

        modelBuilder.Entity<ReportDataV2>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.ToTable("ReportDataV2");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_ReportDataV2");

            entity.Property(e => e.Oid).ValueGeneratedNever();
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.ObjectTypeName).HasMaxLength(512);
            entity.Property(e => e.ParametersObjectTypeName).HasMaxLength(512);
            entity.Property(e => e.PredefinedReportType).HasMaxLength(512);
        });

        modelBuilder.Entity<Resource>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.ToTable("Resource");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_Resource");

            entity.Property(e => e.Oid).ValueGeneratedNever();
            entity.Property(e => e.Caption).HasMaxLength(100);
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
        });

        modelBuilder.Entity<ResourceResourcesEventEvent>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.ToTable("ResourceResources_EventEvents");

            entity.HasIndex(e => new { e.Events, e.Resources }, "iEventsResources_ResourceResources_EventEvents").IsUnique();

            entity.HasIndex(e => e.Events, "iEvents_ResourceResources_EventEvents");

            entity.HasIndex(e => e.Resources, "iResources_ResourceResources_EventEvents");

            entity.Property(e => e.Oid)
                .ValueGeneratedNever()
                .HasColumnName("OID");

            entity.HasOne(d => d.EventsNavigation).WithMany(p => p.ResourceResourcesEventEvents)
                .HasForeignKey(d => d.Events)
                .HasConstraintName("FK_ResourceResources_EventEvents_Events");

            entity.HasOne(d => d.ResourcesNavigation).WithMany(p => p.ResourceResourcesEventEvents)
                .HasForeignKey(d => d.Resources)
                .HasConstraintName("FK_ResourceResources_EventEvents_Resources");
        });

        modelBuilder.Entity<RichTextMailMergeDatum>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_RichTextMailMergeData");

            entity.Property(e => e.Oid).ValueGeneratedNever();
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.Name).HasMaxLength(100);
        });

        modelBuilder.Entity<SalaryRange>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("SalaryRange_pkey");

            entity.ToTable("SalaryRange");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_SalaryRange");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.CreatedDate).HasColumnType("timestamp without time zone");
            entity.Property(e => e.DeletedDate).HasColumnType("timestamp without time zone");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.LastUpdatedDate).HasColumnType("timestamp without time zone");
            entity.Property(e => e.SalaryRange1)
                .HasMaxLength(300)
                .HasColumnName("Salary_Range");
        });

        modelBuilder.Entity<School>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("School_pkey");

            entity.ToTable("School");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_School");

            entity.HasIndex(e => e.Institute, "iInstitute_School");

            entity.HasIndex(e => e.Tambon, "iTambon_School");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.CreatedAt).HasColumnType("timestamp without time zone");
            entity.Property(e => e.DeletedAt).HasColumnType("timestamp without time zone");
            entity.Property(e => e.Email)
                .HasMaxLength(70)
                .HasColumnName("email");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .HasColumnName("fax");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.HouseNumber)
                .HasMaxLength(100)
                .HasColumnName("houseNumber");
            entity.Property(e => e.ImportDataDate).HasColumnType("timestamp without time zone");
            entity.Property(e => e.InstituteId)
                .HasMaxLength(100)
                .HasColumnName("instituteID");
            entity.Property(e => e.LastImportDate).HasColumnType("timestamp without time zone");
            entity.Property(e => e.LastUpdateDateQuantityOfStudyingStudent)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("LastUpdateDate_QuantityOfStudyingStudent");
            entity.Property(e => e.Phone)
                .HasMaxLength(50)
                .HasColumnName("phone");
            entity.Property(e => e.SchoolId)
                .HasMaxLength(150)
                .HasColumnName("schoolID");
            entity.Property(e => e.SchoolName)
                .HasMaxLength(250)
                .HasColumnName("schoolName");
            entity.Property(e => e.SchoolNameEn)
                .HasMaxLength(250)
                .HasColumnName("schoolNameEn");
            entity.Property(e => e.Soi)
                .HasMaxLength(100)
                .HasColumnName("soi");
            entity.Property(e => e.Street)
                .HasMaxLength(100)
                .HasColumnName("street");
            entity.Property(e => e.Telephone)
                .HasMaxLength(100)
                .HasColumnName("telephone");
            entity.Property(e => e.Trok)
                .HasMaxLength(100)
                .HasColumnName("trok");
            entity.Property(e => e.TumbolCode)
                .HasMaxLength(100)
                .HasColumnName("tumbolCode");
            entity.Property(e => e.UpdatedAt).HasColumnType("timestamp without time zone");
            entity.Property(e => e.VillageNumber)
                .HasMaxLength(100)
                .HasColumnName("villageNumber");
            entity.Property(e => e.Website)
                .HasMaxLength(200)
                .HasColumnName("website");
            entity.Property(e => e.ZipCode)
                .HasMaxLength(5)
                .HasColumnName("zipCode");

            entity.HasOne(d => d.InstituteNavigation).WithMany(p => p.Schools)
                .HasForeignKey(d => d.Institute)
                .HasConstraintName("FK_School_Institute");

            entity.HasOne(d => d.TambonNavigation).WithMany(p => p.Schools)
                .HasForeignKey(d => d.Tambon)
                .HasConstraintName("FK_School_Tambon");
        });

        modelBuilder.Entity<SchoolEmployee>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("SchoolEmployee_pkey");

            entity.ToTable("SchoolEmployee");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_SchoolEmployee");

            entity.HasIndex(e => e.SchoolEmployeeType, "iSchoolEmployeeType_SchoolEmployee");

            entity.HasIndex(e => e.School, "iSchool_SchoolEmployee");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.EmployeeTypeId).HasColumnName("employeeTypeID");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .HasColumnName("firstName");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.HouseNo)
                .HasMaxLength(100)
                .HasColumnName("houseNo");
            entity.Property(e => e.IdCard)
                .HasMaxLength(100)
                .HasColumnName("idCard");
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .HasColumnName("lastName");
            entity.Property(e => e.Moo)
                .HasMaxLength(100)
                .HasColumnName("moo");
            entity.Property(e => e.Phone)
                .HasMaxLength(100)
                .HasColumnName("phone");
            entity.Property(e => e.Prefix)
                .HasMaxLength(100)
                .HasColumnName("prefix");
            entity.Property(e => e.SchoolId)
                .HasMaxLength(100)
                .HasColumnName("SchoolID");
            entity.Property(e => e.Soi)
                .HasMaxLength(100)
                .HasColumnName("soi");
            entity.Property(e => e.StartDate)
                .HasMaxLength(100)
                .HasColumnName("startDate");
            entity.Property(e => e.Street)
                .HasMaxLength(100)
                .HasColumnName("street");
            entity.Property(e => e.TeachSubjectId)
                .HasMaxLength(100)
                .HasColumnName("teachSubjectID");
            entity.Property(e => e.Trok)
                .HasMaxLength(100)
                .HasColumnName("trok");
            entity.Property(e => e.TumbolCode)
                .HasMaxLength(100)
                .HasColumnName("tumbolCode");
            entity.Property(e => e.Zipcode)
                .HasMaxLength(100)
                .HasColumnName("zipcode");

            entity.HasOne(d => d.SchoolNavigation).WithMany(p => p.SchoolEmployees)
                .HasForeignKey(d => d.School)
                .HasConstraintName("FK_SchoolEmployee_School");

            entity.HasOne(d => d.SchoolEmployeeTypeNavigation).WithMany(p => p.SchoolEmployees)
                .HasForeignKey(d => d.SchoolEmployeeType)
                .HasConstraintName("FK_SchoolEmployee_SchoolEmployeeType");
        });

        modelBuilder.Entity<SchoolEmployeeGroupType>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("SchoolEmployeeGroupType_pkey");

            entity.ToTable("SchoolEmployeeGroupType");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_SchoolEmployeeGroupType");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.NameTh)
                .HasMaxLength(100)
                .HasColumnName("NameTH");
            entity.Property(e => e.TypeId)
                .HasMaxLength(100)
                .HasColumnName("TypeID");
        });

        modelBuilder.Entity<SchoolEmployeeProfile>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("SchoolEmployeeProfile_pkey");

            entity.ToTable("SchoolEmployeeProfile");

            entity.HasIndex(e => e.ApplicationUser, "iApplicationUser_SchoolEmployeeProfile");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_SchoolEmployeeProfile");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.DateOfBirth).HasColumnType("timestamp without time zone");
            entity.Property(e => e.Email).HasMaxLength(100);
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.IdCard).HasMaxLength(100);
            entity.Property(e => e.Lastname).HasMaxLength(100);
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.PhoneNumber).HasMaxLength(100);
            entity.Property(e => e.Position).HasMaxLength(100);
            entity.Property(e => e.Titlenameid).HasMaxLength(100);
            entity.Property(e => e.UserPhotoBase64String).HasColumnName("UserPhoto_Base64String");

            entity.HasOne(d => d.ApplicationUserNavigation).WithMany(p => p.SchoolEmployeeProfiles)
                .HasForeignKey(d => d.ApplicationUser)
                .HasConstraintName("FK_SchoolEmployeeProfile_ApplicationUser");
        });

        modelBuilder.Entity<SchoolEmployeeType>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("SchoolEmployeeType_pkey");

            entity.ToTable("SchoolEmployeeType");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_SchoolEmployeeType");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.NameTh)
                .HasMaxLength(100)
                .HasColumnName("NameTH");
            entity.Property(e => e.TypeId)
                .HasMaxLength(100)
                .HasColumnName("TypeID");
        });

        modelBuilder.Entity<SchoolGraduatedStudent>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("SchoolGraduatedStudent_pkey");

            entity.ToTable("SchoolGraduatedStudent");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_SchoolGraduatedStudent");

            entity.HasIndex(e => e.School, "iSchool_SchoolGraduatedStudent");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.GraduatedSemesters).HasMaxLength(100);
            entity.Property(e => e.GraduatedYearTh)
                .HasMaxLength(4)
                .HasColumnName("GraduatedYearTH");
            entity.Property(e => e.SchoolCode).HasMaxLength(100);

            entity.HasOne(d => d.SchoolNavigation).WithMany(p => p.SchoolGraduatedStudents)
                .HasForeignKey(d => d.School)
                .HasConstraintName("FK_SchoolGraduatedStudent_School");
        });

        modelBuilder.Entity<ServerPrefix>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("ServerPrefix_pkey");

            entity.ToTable("ServerPrefix");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_ServerPrefix");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.Prefix).HasMaxLength(100);
        });

        modelBuilder.Entity<State>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.ToTable("State");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_State");

            entity.Property(e => e.Oid).ValueGeneratedNever();
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.LongName).HasMaxLength(100);
            entity.Property(e => e.ShortName).HasMaxLength(100);
        });

        modelBuilder.Entity<Student>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("Student_pkey");

            entity.ToTable("Student");

            entity.HasIndex(e => e.ApplicationUser, "iApplicationUser_Student");

            entity.HasIndex(e => e.CertificateType, "iCertificateType_Student");

            entity.HasIndex(e => e.District, "iDistrict_Student");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_Student");

            entity.HasIndex(e => e.Major, "iMajor_Student");

            entity.HasIndex(e => e.Minor, "iMinor_Student");

            entity.HasIndex(e => e.Nationality, "iNationality_Student");

            entity.HasIndex(e => e.Province, "iProvince_Student");

            entity.HasIndex(e => e.Religion, "iReligion_Student");

            entity.HasIndex(e => e.Tambon, "iTambon_Student");

            entity.HasIndex(e => e.TitleName, "iTitleName_Student");

            entity.HasIndex(e => e.Contacttambon, "icontacttambon_Student");

            entity.HasIndex(e => e.LookingForJob, "ilookingForJob_Student");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.Base64thrumnail).HasColumnName("base64thrumnail");
            entity.Property(e => e.Birthday)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("birthday");
            entity.Property(e => e.BloodName)
                .HasMaxLength(50)
                .HasColumnName("bloodName");
            entity.Property(e => e.Contacthousenumber)
                .HasMaxLength(50)
                .HasColumnName("contacthousenumber");
            entity.Property(e => e.Contactmoo)
                .HasMaxLength(50)
                .HasColumnName("contactmoo");
            entity.Property(e => e.Contactsoi)
                .HasMaxLength(200)
                .HasColumnName("contactsoi");
            entity.Property(e => e.Contactstreet)
                .HasMaxLength(200)
                .HasColumnName("contactstreet");
            entity.Property(e => e.Contacttambon).HasColumnName("contacttambon");
            entity.Property(e => e.Domicile).HasColumnName("domicile");
            entity.Property(e => e.Email)
                .HasMaxLength(75)
                .HasColumnName("email");
            entity.Property(e => e.EntranceDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("entranceDate");
            entity.Property(e => e.EntranceSemester)
                .HasMaxLength(50)
                .HasColumnName("entranceSemester");
            entity.Property(e => e.EntranceYear)
                .HasMaxLength(50)
                .HasColumnName("entranceYear");
            entity.Property(e => e.Fax)
                .HasMaxLength(20)
                .HasColumnName("fax");
            entity.Property(e => e.Firstname)
                .HasMaxLength(120)
                .HasColumnName("firstname");
            entity.Property(e => e.FirstnameEn)
                .HasMaxLength(120)
                .HasColumnName("firstnameEn");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.Gender)
                .HasMaxLength(1)
                .HasColumnName("gender");
            entity.Property(e => e.Gpax)
                .HasMaxLength(50)
                .HasColumnName("gpax");
            entity.Property(e => e.GradeId)
                .HasMaxLength(50)
                .HasColumnName("gradeID");
            entity.Property(e => e.GradeNameTh)
                .HasMaxLength(50)
                .HasColumnName("gradeNameTh");
            entity.Property(e => e.GraduateCode)
                .HasMaxLength(50)
                .HasColumnName("graduateCode");
            entity.Property(e => e.GraduatedSemeter).HasMaxLength(100);
            entity.Property(e => e.GraduatedYearTh)
                .HasMaxLength(4)
                .HasColumnName("GraduatedYearTH");
            entity.Property(e => e.GroupAbbr)
                .HasMaxLength(50)
                .HasColumnName("groupAbbr");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(10)
                .HasColumnName("groupCode");
            entity.Property(e => e.GroupName)
                .HasMaxLength(50)
                .HasColumnName("groupName");
            entity.Property(e => e.Hight)
                .HasMaxLength(3)
                .HasColumnName("hight");
            entity.Property(e => e.HouseId)
                .HasMaxLength(50)
                .HasColumnName("houseId");
            entity.Property(e => e.HouseNumber)
                .HasMaxLength(100)
                .HasColumnName("houseNumber");
            entity.Property(e => e.Idcard)
                .HasMaxLength(13)
                .HasColumnName("idcard");
            entity.Property(e => e.ImportDataDate).HasColumnType("timestamp without time zone");
            entity.Property(e => e.LastImportDate).HasColumnType("timestamp without time zone");
            entity.Property(e => e.LookingForJob).HasColumnName("lookingForJob");
            entity.Property(e => e.MajorCode)
                .HasMaxLength(100)
                .HasColumnName("majorCode");
            entity.Property(e => e.MajorId)
                .HasMaxLength(100)
                .HasColumnName("majorID");
            entity.Property(e => e.MajorNameTh)
                .HasMaxLength(100)
                .HasColumnName("majorNameTh");
            entity.Property(e => e.Marital).HasColumnName("marital");
            entity.Property(e => e.Middlename)
                .HasMaxLength(50)
                .HasColumnName("middlename");
            entity.Property(e => e.Military).HasColumnName("military");
            entity.Property(e => e.MinorCode)
                .HasMaxLength(50)
                .HasColumnName("minorCode");
            entity.Property(e => e.MinorId)
                .HasMaxLength(50)
                .HasColumnName("minorID");
            entity.Property(e => e.MinorNameTh)
                .HasMaxLength(100)
                .HasColumnName("minorNameTh");
            entity.Property(e => e.Moo)
                .HasMaxLength(50)
                .HasColumnName("moo");
            entity.Property(e => e.NationalityId)
                .HasMaxLength(3)
                .HasColumnName("nationalityID");
            entity.Property(e => e.Nickname)
                .HasMaxLength(50)
                .HasColumnName("nickname");
            entity.Property(e => e.ParentFirstname)
                .HasMaxLength(120)
                .HasColumnName("parentFirstname");
            entity.Property(e => e.ParentPhone)
                .HasMaxLength(100)
                .HasColumnName("parentPhone");
            entity.Property(e => e.ParentPrefixId)
                .HasMaxLength(50)
                .HasColumnName("parentPrefixId");
            entity.Property(e => e.ParentRelation)
                .HasMaxLength(100)
                .HasColumnName("parentRelation");
            entity.Property(e => e.ParentSurname)
                .HasMaxLength(120)
                .HasColumnName("parentSurname");
            entity.Property(e => e.ProfileUpdatedDate).HasColumnType("timestamp without time zone");
            entity.Property(e => e.RaceId)
                .HasMaxLength(3)
                .HasColumnName("raceID");
            entity.Property(e => e.ReligionId)
                .HasMaxLength(6)
                .HasColumnName("religionID");
            entity.Property(e => e.SchoolId)
                .HasMaxLength(150)
                .HasColumnName("schoolID");
            entity.Property(e => e.SchoolName)
                .HasMaxLength(150)
                .HasColumnName("schoolName");
            entity.Property(e => e.Soi)
                .HasMaxLength(80)
                .HasColumnName("soi");
            entity.Property(e => e.Street)
                .HasMaxLength(80)
                .HasColumnName("street");
            entity.Property(e => e.StudentCode)
                .HasMaxLength(20)
                .HasColumnName("studentCode");
            entity.Property(e => e.StudentId)
                .HasMaxLength(10)
                .HasColumnName("studentID");
            entity.Property(e => e.StudentStatusCode)
                .HasMaxLength(50)
                .HasColumnName("studentStatusCode");
            entity.Property(e => e.StudentStatusName)
                .HasMaxLength(150)
                .HasColumnName("studentStatusName");
            entity.Property(e => e.StudentTypeCode)
                .HasMaxLength(50)
                .HasColumnName("studentTypeCode");
            entity.Property(e => e.StudentTypeName)
                .HasMaxLength(100)
                .HasColumnName("studentTypeName");
            entity.Property(e => e.Surname)
                .HasMaxLength(120)
                .HasColumnName("surname");
            entity.Property(e => e.SurnameEn)
                .HasMaxLength(120)
                .HasColumnName("surnameEn");
            entity.Property(e => e.Tel)
                .HasMaxLength(20)
                .HasColumnName("tel");
            entity.Property(e => e.TitlenameId)
                .HasMaxLength(50)
                .HasColumnName("titlenameID");
            entity.Property(e => e.TumbolCode)
                .HasMaxLength(50)
                .HasColumnName("tumbolCode");
            entity.Property(e => e.Weight)
                .HasMaxLength(3)
                .HasColumnName("weight");
            entity.Property(e => e.ZipCode)
                .HasMaxLength(100)
                .HasColumnName("zipCode");

            entity.HasOne(d => d.ApplicationUserNavigation).WithMany(p => p.Students)
                .HasForeignKey(d => d.ApplicationUser)
                .HasConstraintName("FK_Student_ApplicationUser");

            entity.HasOne(d => d.CertificateTypeNavigation).WithMany(p => p.Students)
                .HasForeignKey(d => d.CertificateType)
                .HasConstraintName("FK_Student_CertificateType");

            entity.HasOne(d => d.ContacttambonNavigation).WithMany(p => p.StudentContacttambonNavigations)
                .HasForeignKey(d => d.Contacttambon)
                .HasConstraintName("FK_Student_contacttambon");

            entity.HasOne(d => d.DistrictNavigation).WithMany(p => p.Students)
                .HasForeignKey(d => d.District)
                .HasConstraintName("FK_Student_District");

            entity.HasOne(d => d.LookingForJobNavigation).WithMany(p => p.Students)
                .HasForeignKey(d => d.LookingForJob)
                .HasConstraintName("FK_Student_lookingForJob");

            entity.HasOne(d => d.MajorNavigation).WithMany(p => p.Students)
                .HasForeignKey(d => d.Major)
                .HasConstraintName("FK_Student_Major");

            entity.HasOne(d => d.MinorNavigation).WithMany(p => p.Students)
                .HasForeignKey(d => d.Minor)
                .HasConstraintName("FK_Student_Minor");

            entity.HasOne(d => d.NationalityNavigation).WithMany(p => p.Students)
                .HasForeignKey(d => d.Nationality)
                .HasConstraintName("FK_Student_Nationality");

            entity.HasOne(d => d.ProvinceNavigation).WithMany(p => p.Students)
                .HasForeignKey(d => d.Province)
                .HasConstraintName("FK_Student_Province");

            entity.HasOne(d => d.ReligionNavigation).WithMany(p => p.Students)
                .HasForeignKey(d => d.Religion)
                .HasConstraintName("FK_Student_Religion");

            entity.HasOne(d => d.TambonNavigation).WithMany(p => p.StudentTambonNavigations)
                .HasForeignKey(d => d.Tambon)
                .HasConstraintName("FK_Student_Tambon");

            entity.HasOne(d => d.TitleNameNavigation).WithMany(p => p.Students)
                .HasForeignKey(d => d.TitleName)
                .HasConstraintName("FK_Student_TitleName");
        });

        modelBuilder.Entity<StudentJobRecord>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("Student_JobRecord_pkey");

            entity.ToTable("Student_JobRecord");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_Student_JobRecord");

            entity.HasIndex(e => e.OrganizationType, "iOrganizationType_Student_JobRecord");

            entity.HasIndex(e => e.SalaryRange, "iSalaryRange_Student_JobRecord");

            entity.HasIndex(e => e.Student, "iStudent_Student_JobRecord");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.EndDate).HasColumnType("timestamp without time zone");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.JobDescription).HasMaxLength(100);
            entity.Property(e => e.OrganizationName).HasMaxLength(100);
            entity.Property(e => e.PositionName).HasMaxLength(100);
            entity.Property(e => e.Salary).HasPrecision(28, 8);
            entity.Property(e => e.StartDate).HasColumnType("timestamp without time zone");

            entity.HasOne(d => d.OrganizationTypeNavigation).WithMany(p => p.StudentJobRecords)
                .HasForeignKey(d => d.OrganizationType)
                .HasConstraintName("FK_Student_JobRecord_OrganizationType");

            entity.HasOne(d => d.SalaryRangeNavigation).WithMany(p => p.StudentJobRecords)
                .HasForeignKey(d => d.SalaryRange)
                .HasConstraintName("FK_Student_JobRecord_SalaryRange");

            entity.HasOne(d => d.StudentNavigation).WithMany(p => p.StudentJobRecords)
                .HasForeignKey(d => d.Student)
                .HasConstraintName("FK_Student_JobRecord_Student");
        });

        modelBuilder.Entity<StudentResume>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("StudentResume_pkey");

            entity.ToTable("StudentResume");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_StudentResume");

            entity.HasIndex(e => e.Student, "iStudent_StudentResume");

            entity.HasIndex(e => e.Fileattachment, "ifileattachment_StudentResume");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.Fileattachment).HasColumnName("fileattachment");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");

            entity.HasOne(d => d.FileattachmentNavigation).WithMany(p => p.StudentResumes)
                .HasForeignKey(d => d.Fileattachment)
                .HasConstraintName("FK_StudentResume_fileattachment");

            entity.HasOne(d => d.StudentNavigation).WithMany(p => p.StudentResumes)
                .HasForeignKey(d => d.Student)
                .HasConstraintName("FK_StudentResume_Student");
        });

        modelBuilder.Entity<StudentReward>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("StudentReward_pkey");

            entity.ToTable("StudentReward");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_StudentReward");

            entity.HasIndex(e => e.Student, "iStudent_StudentReward");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.RewardDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("rewardDate");
            entity.Property(e => e.Topic).HasMaxLength(300);

            entity.HasOne(d => d.StudentNavigation).WithMany(p => p.StudentRewards)
                .HasForeignKey(d => d.Student)
                .HasConstraintName("FK_StudentReward_Student");
        });

        modelBuilder.Entity<StudentStudyRecord>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("Student_StudyRecord_pkey");

            entity.ToTable("Student_StudyRecord");

            entity.HasIndex(e => e.EducationalQualification, "iEducationalQualification_Student_StudyRecord");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_Student_StudyRecord");

            entity.HasIndex(e => e.Student, "iStudent_Student_StudyRecord");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.Gpa)
                .HasMaxLength(100)
                .HasColumnName("GPA");
            entity.Property(e => e.GraduatedYear).HasMaxLength(100);
            entity.Property(e => e.MajorNameTh)
                .HasMaxLength(100)
                .HasColumnName("MajorNameTH");
            entity.Property(e => e.MinorNameTh)
                .HasMaxLength(100)
                .HasColumnName("MinorNameTH");
            entity.Property(e => e.SchoolName).HasMaxLength(100);

            entity.HasOne(d => d.EducationalQualificationNavigation).WithMany(p => p.StudentStudyRecords)
                .HasForeignKey(d => d.EducationalQualification)
                .HasConstraintName("FK_Student_StudyRecord_EducationalQualification");

            entity.HasOne(d => d.StudentNavigation).WithMany(p => p.StudentStudyRecords)
                .HasForeignKey(d => d.Student)
                .HasConstraintName("FK_Student_StudyRecord_Student");
        });

        modelBuilder.Entity<StudentVeceducationInformation>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("Student_VECEducationInformation_pkey");

            entity.ToTable("Student_VECEducationInformation");

            entity.HasIndex(e => e.CertificateType, "iCertificateType_Student_VECEducationInformation");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_Student_VECEducationInformation");

            entity.HasIndex(e => e.Major, "iMajor_Student_VECEducationInformation");

            entity.HasIndex(e => e.Minor, "iMinor_Student_VECEducationInformation");

            entity.HasIndex(e => e.School, "iSchool_Student_VECEducationInformation");

            entity.HasIndex(e => e.Student, "iStudent_Student_VECEducationInformation");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.EntranceDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("entranceDate");
            entity.Property(e => e.EntranceSemester)
                .HasMaxLength(50)
                .HasColumnName("entranceSemester");
            entity.Property(e => e.EntranceYear)
                .HasMaxLength(50)
                .HasColumnName("entranceYear");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.Gpax)
                .HasMaxLength(50)
                .HasColumnName("gpax");
            entity.Property(e => e.GradautedYearTh)
                .HasMaxLength(100)
                .HasColumnName("GradautedYearTH");
            entity.Property(e => e.GradeId)
                .HasMaxLength(50)
                .HasColumnName("gradeID");
            entity.Property(e => e.GradeNameTh)
                .HasMaxLength(50)
                .HasColumnName("gradeNameTh");
            entity.Property(e => e.GraduateCode)
                .HasMaxLength(50)
                .HasColumnName("graduateCode");
            entity.Property(e => e.GroupAbbr)
                .HasMaxLength(50)
                .HasColumnName("groupAbbr");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(10)
                .HasColumnName("groupCode");
            entity.Property(e => e.GroupName)
                .HasMaxLength(50)
                .HasColumnName("groupName");
            entity.Property(e => e.Idcard)
                .HasMaxLength(13)
                .HasColumnName("idcard");
            entity.Property(e => e.MajorCode)
                .HasMaxLength(100)
                .HasColumnName("majorCode");
            entity.Property(e => e.MajorId)
                .HasMaxLength(100)
                .HasColumnName("majorID");
            entity.Property(e => e.MajorNameTh)
                .HasMaxLength(100)
                .HasColumnName("majorNameTh");
            entity.Property(e => e.MinorCode)
                .HasMaxLength(50)
                .HasColumnName("minorCode");
            entity.Property(e => e.MinorId)
                .HasMaxLength(50)
                .HasColumnName("minorID");
            entity.Property(e => e.MinorNameTh)
                .HasMaxLength(100)
                .HasColumnName("minorNameTh");
            entity.Property(e => e.SchoolId)
                .HasMaxLength(150)
                .HasColumnName("schoolID");
            entity.Property(e => e.SchoolName)
                .HasMaxLength(150)
                .HasColumnName("schoolName");
            entity.Property(e => e.StudentCode)
                .HasMaxLength(20)
                .HasColumnName("studentCode");
            entity.Property(e => e.StudentId)
                .HasMaxLength(10)
                .HasColumnName("studentID");
            entity.Property(e => e.StudentStatusCode)
                .HasMaxLength(50)
                .HasColumnName("studentStatusCode");
            entity.Property(e => e.StudentStatusName)
                .HasMaxLength(150)
                .HasColumnName("studentStatusName");
            entity.Property(e => e.StudentTypeCode)
                .HasMaxLength(50)
                .HasColumnName("studentTypeCode");
            entity.Property(e => e.StudentTypeName)
                .HasMaxLength(100)
                .HasColumnName("studentTypeName");
            entity.Property(e => e.SubjectTypeCode)
                .HasMaxLength(100)
                .HasColumnName("subjectTypeCode");
            entity.Property(e => e.SubjectTypeId)
                .HasMaxLength(100)
                .HasColumnName("subjectTypeID");
            entity.Property(e => e.SubjectTypeNameTh)
                .HasMaxLength(500)
                .HasColumnName("subjectTypeNameTh");

            entity.HasOne(d => d.CertificateTypeNavigation).WithMany(p => p.StudentVeceducationInformations)
                .HasForeignKey(d => d.CertificateType)
                .HasConstraintName("FK_Student_VECEducationInformation_CertificateType");

            entity.HasOne(d => d.MajorNavigation).WithMany(p => p.StudentVeceducationInformations)
                .HasForeignKey(d => d.Major)
                .HasConstraintName("FK_Student_VECEducationInformation_Major");

            entity.HasOne(d => d.MinorNavigation).WithMany(p => p.StudentVeceducationInformations)
                .HasForeignKey(d => d.Minor)
                .HasConstraintName("FK_Student_VECEducationInformation_Minor");

            entity.HasOne(d => d.SchoolNavigation).WithMany(p => p.StudentVeceducationInformations)
                .HasForeignKey(d => d.School)
                .HasConstraintName("FK_Student_VECEducationInformation_School");

            entity.HasOne(d => d.StudentNavigation).WithMany(p => p.StudentVeceducationInformations)
                .HasForeignKey(d => d.Student)
                .HasConstraintName("FK_Student_VECEducationInformation_Student");
        });

        modelBuilder.Entity<SubjectType>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("SubjectType_pkey");

            entity.ToTable("SubjectType");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_SubjectType");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.SubjectTypeCode)
                .HasMaxLength(100)
                .HasColumnName("subjectTypeCode");
            entity.Property(e => e.SubjectTypeId)
                .HasMaxLength(100)
                .HasColumnName("subjectTypeID");
            entity.Property(e => e.SubjectTypeNameEn)
                .HasMaxLength(100)
                .HasColumnName("subjectTypeNameEn");
            entity.Property(e => e.SubjectTypeNameTh)
                .HasMaxLength(100)
                .HasColumnName("subjectTypeNameTh");
        });

        modelBuilder.Entity<Tambon>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("Tambon_pkey");

            entity.ToTable("Tambon");

            entity.HasIndex(e => e.District, "iDistrict_Tambon");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_Tambon");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.DistrictId)
                .HasMaxLength(100)
                .HasColumnName("DistrictID");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.PostCodeAll).HasMaxLength(100);
            entity.Property(e => e.PostCodeMain).HasMaxLength(100);
            entity.Property(e => e.PostCodeRemark).HasMaxLength(100);
            entity.Property(e => e.TambonEng).HasMaxLength(100);
            entity.Property(e => e.TambonEngShort).HasMaxLength(100);
            entity.Property(e => e.TambonId)
                .HasMaxLength(100)
                .HasColumnName("TambonID");
            entity.Property(e => e.TambonThai).HasMaxLength(100);
            entity.Property(e => e.TambonThaiShort).HasMaxLength(100);

            entity.HasOne(d => d.DistrictNavigation).WithMany(p => p.Tambons)
                .HasForeignKey(d => d.District)
                .HasConstraintName("FK_Tambon_District");
        });

        modelBuilder.Entity<Task>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.ToTable("Task");

            entity.HasIndex(e => e.AssignedTo, "iAssignedTo_Task");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_Task");

            entity.Property(e => e.Oid).ValueGeneratedNever();
            entity.Property(e => e.DateCompleted).HasColumnType("timestamp without time zone");
            entity.Property(e => e.DueDate).HasColumnType("timestamp without time zone");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.StartDate).HasColumnType("timestamp without time zone");
            entity.Property(e => e.Subject).HasMaxLength(100);

            entity.HasOne(d => d.AssignedToNavigation).WithMany(p => p.Tasks)
                .HasForeignKey(d => d.AssignedTo)
                .HasConstraintName("FK_Task_AssignedTo");
        });

        modelBuilder.Entity<TitleName>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("TitleName_pkey");

            entity.ToTable("TitleName");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_TitleName");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.TitleNameEng).HasMaxLength(100);
            entity.Property(e => e.TitleNameId)
                .HasMaxLength(100)
                .HasColumnName("TitleNameID");
            entity.Property(e => e.TitleNameTh).HasMaxLength(100);
        });

        modelBuilder.Entity<UserBookmark>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("UserBookmark_pkey");

            entity.ToTable("UserBookmark");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_UserBookmark");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.BookmarkTypeName).HasMaxLength(100);
            entity.Property(e => e.BookmarkValue).HasMaxLength(100);
            entity.Property(e => e.CreatedDate).HasColumnType("timestamp without time zone");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.UserReferenceKey).HasMaxLength(100);
            entity.Property(e => e.UserType).HasMaxLength(100);
        });

        modelBuilder.Entity<VerifyManager>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("VerifyManager_pkey");

            entity.ToTable("VerifyManager");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_VerifyManager");

            entity.HasIndex(e => e.TitleName, "iTitleName_VerifyManager");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.Position).HasMaxLength(100);
            entity.Property(e => e.SchoolId).HasMaxLength(100);
            entity.Property(e => e.Surname).HasMaxLength(100);

            entity.HasOne(d => d.TitleNameNavigation).WithMany(p => p.VerifyManagers)
                .HasForeignKey(d => d.TitleName)
                .HasConstraintName("FK_VerifyManager_TitleName");
        });

        modelBuilder.Entity<ViewCounter>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("ViewCounter_pkey");

            entity.ToTable("ViewCounter");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_ViewCounter");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.ReferenceEntityClassName).HasMaxLength(100);
            entity.Property(e => e.ReferenceEntityOid)
                .HasMaxLength(100)
                .HasColumnName("ReferenceEntity_Oid");
        });

        modelBuilder.Entity<XpoInstanceKey>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("XpoInstanceKey_pkey");

            entity.ToTable("XpoInstanceKey");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_XpoInstanceKey");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
        });

        modelBuilder.Entity<XpoRunningWorkflowInstanceInfo>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.ToTable("XpoRunningWorkflowInstanceInfo");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_XpoRunningWorkflowInstanceInfo");

            entity.Property(e => e.Oid).ValueGeneratedNever();
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.State).HasMaxLength(100);
            entity.Property(e => e.TargetObjectHandle).HasMaxLength(255);
            entity.Property(e => e.WorkflowName).HasMaxLength(255);
            entity.Property(e => e.WorkflowUniqueId).HasMaxLength(255);
        });

        modelBuilder.Entity<XpoStartWorkflowRequest>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.ToTable("XpoStartWorkflowRequest");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_XpoStartWorkflowRequest");

            entity.Property(e => e.Oid).ValueGeneratedNever();
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.TargetObjectKey).HasMaxLength(100);
            entity.Property(e => e.TargetWorkflowUniqueId).HasMaxLength(100);
        });

        modelBuilder.Entity<XpoState>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.ToTable("XpoState");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_XpoState");

            entity.HasIndex(e => e.StateMachine, "iStateMachine_XpoState");

            entity.Property(e => e.Oid).ValueGeneratedNever();
            entity.Property(e => e.Caption).HasMaxLength(100);
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");

            entity.HasOne(d => d.StateMachineNavigation).WithMany(p => p.XpoStates)
                .HasForeignKey(d => d.StateMachine)
                .HasConstraintName("FK_XpoState_StateMachine");
        });

        modelBuilder.Entity<XpoStateAppearance>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.ToTable("XpoStateAppearance");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_XpoStateAppearance");

            entity.HasIndex(e => e.State, "iState_XpoStateAppearance");

            entity.Property(e => e.Oid).ValueGeneratedNever();
            entity.Property(e => e.AppearanceItemType).HasMaxLength(100);
            entity.Property(e => e.Context).HasMaxLength(100);
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.Method).HasMaxLength(100);
            entity.Property(e => e.TargetItems).HasMaxLength(100);

            entity.HasOne(d => d.StateNavigation).WithMany(p => p.XpoStateAppearances)
                .HasForeignKey(d => d.State)
                .HasConstraintName("FK_XpoStateAppearance_State");
        });

        modelBuilder.Entity<XpoStateMachine>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.ToTable("XpoStateMachine");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_XpoStateMachine");

            entity.HasIndex(e => e.StartState, "iStartState_XpoStateMachine");

            entity.Property(e => e.Oid).ValueGeneratedNever();
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.StatePropertyName).HasMaxLength(100);

            entity.HasOne(d => d.StartStateNavigation).WithMany(p => p.XpoStateMachines)
                .HasForeignKey(d => d.StartState)
                .HasConstraintName("FK_XpoStateMachine_StartState");
        });

        modelBuilder.Entity<XpoTrackingRecord>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("XpoTrackingRecord_pkey");

            entity.ToTable("XpoTrackingRecord");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_XpoTrackingRecord");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.ActivityId).HasMaxLength(100);
            entity.Property(e => e.DateTime).HasColumnType("timestamp without time zone");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
        });

        modelBuilder.Entity<XpoTransition>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.ToTable("XpoTransition");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_XpoTransition");

            entity.HasIndex(e => e.SourceState, "iSourceState_XpoTransition");

            entity.HasIndex(e => e.TargetState, "iTargetState_XpoTransition");

            entity.Property(e => e.Oid).ValueGeneratedNever();
            entity.Property(e => e.Caption).HasMaxLength(100);
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");

            entity.HasOne(d => d.SourceStateNavigation).WithMany(p => p.XpoTransitionSourceStateNavigations)
                .HasForeignKey(d => d.SourceState)
                .HasConstraintName("FK_XpoTransition_SourceState");

            entity.HasOne(d => d.TargetStateNavigation).WithMany(p => p.XpoTransitionTargetStateNavigations)
                .HasForeignKey(d => d.TargetState)
                .HasConstraintName("FK_XpoTransition_TargetState");
        });

        modelBuilder.Entity<XpoUserActivityVersion>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.ToTable("XpoUserActivityVersion");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_XpoUserActivityVersion");

            entity.Property(e => e.Oid).ValueGeneratedNever();
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.WorkflowUniqueId).HasMaxLength(100);
        });

        modelBuilder.Entity<XpoWorkflowDefinition>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.ToTable("XpoWorkflowDefinition");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_XpoWorkflowDefinition");

            entity.Property(e => e.Oid).ValueGeneratedNever();
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.Name).HasMaxLength(255);
        });

        modelBuilder.Entity<XpoWorkflowInstance>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("XpoWorkflowInstance_pkey");

            entity.ToTable("XpoWorkflowInstance");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_XpoWorkflowInstance");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.ExpirationDateTime).HasColumnType("timestamp without time zone");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.Owner).HasMaxLength(100);
        });

        modelBuilder.Entity<XpoWorkflowInstanceControlCommandRequest>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.ToTable("XpoWorkflowInstanceControlCommandRequest");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_XpoWorkflowInstanceControlCommandRequest");

            entity.Property(e => e.Oid).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("timestamp without time zone");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.TargetWorkflowUniqueId).HasMaxLength(100);
        });

        modelBuilder.Entity<XpobjectType>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("XPObjectType_pkey");

            entity.ToTable("XPObjectType");

            entity.HasIndex(e => e.TypeName, "iTypeName_XPObjectType").IsUnique();

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.AssemblyName).HasMaxLength(254);
            entity.Property(e => e.TypeName).HasMaxLength(254);
        });

        modelBuilder.Entity<XpweakReference>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.ToTable("XPWeakReference");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_XPWeakReference");

            entity.HasIndex(e => e.ObjectType, "iObjectType_XPWeakReference");

            entity.HasIndex(e => e.TargetType, "iTargetType_XPWeakReference");

            entity.Property(e => e.Oid).ValueGeneratedNever();
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.TargetKey).HasMaxLength(100);

            entity.HasOne(d => d.ObjectTypeNavigation).WithMany(p => p.XpweakReferenceObjectTypeNavigations)
                .HasForeignKey(d => d.ObjectType)
                .HasConstraintName("FK_XPWeakReference_ObjectType");

            entity.HasOne(d => d.TargetTypeNavigation).WithMany(p => p.XpweakReferenceTargetTypeNavigations)
                .HasForeignKey(d => d.TargetType)
                .HasConstraintName("FK_XPWeakReference_TargetType");
        });

        modelBuilder.Entity<XtraReportDatum>(entity =>
        {
            entity.HasKey(e => e.Oid).HasName("XtraReportData_pkey");

            entity.HasIndex(e => e.Gcrecord, "iGCRecord_XtraReportData");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.ObjectTypeName).HasMaxLength(512);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}